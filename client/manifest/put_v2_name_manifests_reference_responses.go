// Code generated by go-swagger; DO NOT EDIT.

package manifest

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// PutV2NameManifestsReferenceReader is a Reader for the PutV2NameManifestsReference structure.
type PutV2NameManifestsReferenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutV2NameManifestsReferenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewPutV2NameManifestsReferenceAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutV2NameManifestsReferenceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutV2NameManifestsReferenceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutV2NameManifestsReferenceAccepted creates a PutV2NameManifestsReferenceAccepted with default headers values
func NewPutV2NameManifestsReferenceAccepted() *PutV2NameManifestsReferenceAccepted {
	return &PutV2NameManifestsReferenceAccepted{}
}

/*PutV2NameManifestsReferenceAccepted handles this case with default header values.

The manifest has been accepted by the registry and is stored under the specified name and tag.
*/
type PutV2NameManifestsReferenceAccepted struct {
}

func (o *PutV2NameManifestsReferenceAccepted) Error() string {
	return fmt.Sprintf("[PUT /v2/{name}/manifests/{reference}][%d] putV2NameManifestsReferenceAccepted ", 202)
}

func (o *PutV2NameManifestsReferenceAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutV2NameManifestsReferenceBadRequest creates a PutV2NameManifestsReferenceBadRequest with default headers values
func NewPutV2NameManifestsReferenceBadRequest() *PutV2NameManifestsReferenceBadRequest {
	return &PutV2NameManifestsReferenceBadRequest{}
}

/*PutV2NameManifestsReferenceBadRequest handles this case with default header values.

On failure
*/
type PutV2NameManifestsReferenceBadRequest struct {
	Payload *PutV2NameManifestsReferenceBadRequestBody
}

func (o *PutV2NameManifestsReferenceBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v2/{name}/manifests/{reference}][%d] putV2NameManifestsReferenceBadRequest  %+v", 400, o.Payload)
}

func (o *PutV2NameManifestsReferenceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutV2NameManifestsReferenceBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutV2NameManifestsReferenceUnauthorized creates a PutV2NameManifestsReferenceUnauthorized with default headers values
func NewPutV2NameManifestsReferenceUnauthorized() *PutV2NameManifestsReferenceUnauthorized {
	return &PutV2NameManifestsReferenceUnauthorized{}
}

/*PutV2NameManifestsReferenceUnauthorized handles this case with default header values.

Unauthorized access
*/
type PutV2NameManifestsReferenceUnauthorized struct {
	Payload *PutV2NameManifestsReferenceUnauthorizedBody
}

func (o *PutV2NameManifestsReferenceUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v2/{name}/manifests/{reference}][%d] putV2NameManifestsReferenceUnauthorized  %+v", 401, o.Payload)
}

func (o *PutV2NameManifestsReferenceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutV2NameManifestsReferenceUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PutV2NameManifestsReferenceBadRequestBody put v2 name manifests reference bad request body
swagger:model PutV2NameManifestsReferenceBadRequestBody
*/
type PutV2NameManifestsReferenceBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this put v2 name manifests reference bad request body
func (o *PutV2NameManifestsReferenceBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutV2NameManifestsReferenceBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putV2NameManifestsReferenceBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutV2NameManifestsReferenceBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutV2NameManifestsReferenceBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutV2NameManifestsReferenceBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutV2NameManifestsReferenceUnauthorizedBody put v2 name manifests reference unauthorized body
swagger:model PutV2NameManifestsReferenceUnauthorizedBody
*/
type PutV2NameManifestsReferenceUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this put v2 name manifests reference unauthorized body
func (o *PutV2NameManifestsReferenceUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutV2NameManifestsReferenceUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putV2NameManifestsReferenceUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutV2NameManifestsReferenceUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutV2NameManifestsReferenceUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PutV2NameManifestsReferenceUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
