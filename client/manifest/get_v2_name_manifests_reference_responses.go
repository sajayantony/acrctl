// Code generated by go-swagger; DO NOT EDIT.

package manifest

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// GetV2NameManifestsReferenceReader is a Reader for the GetV2NameManifestsReference structure.
type GetV2NameManifestsReferenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV2NameManifestsReferenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetV2NameManifestsReferenceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetV2NameManifestsReferenceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetV2NameManifestsReferenceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetV2NameManifestsReferenceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetV2NameManifestsReferenceOK creates a GetV2NameManifestsReferenceOK with default headers values
func NewGetV2NameManifestsReferenceOK() *GetV2NameManifestsReferenceOK {
	return &GetV2NameManifestsReferenceOK{}
}

/*GetV2NameManifestsReferenceOK handles this case with default header values.

Returns the requested manifest file
*/
type GetV2NameManifestsReferenceOK struct {
	Payload *GetV2NameManifestsReferenceOKBody
}

func (o *GetV2NameManifestsReferenceOK) Error() string {
	return fmt.Sprintf("[GET /v2/{name}/manifests/{reference}][%d] getV2NameManifestsReferenceOK  %+v", 200, o.Payload)
}

func (o *GetV2NameManifestsReferenceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV2NameManifestsReferenceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV2NameManifestsReferenceBadRequest creates a GetV2NameManifestsReferenceBadRequest with default headers values
func NewGetV2NameManifestsReferenceBadRequest() *GetV2NameManifestsReferenceBadRequest {
	return &GetV2NameManifestsReferenceBadRequest{}
}

/*GetV2NameManifestsReferenceBadRequest handles this case with default header values.

On failure
*/
type GetV2NameManifestsReferenceBadRequest struct {
	Payload *GetV2NameManifestsReferenceBadRequestBody
}

func (o *GetV2NameManifestsReferenceBadRequest) Error() string {
	return fmt.Sprintf("[GET /v2/{name}/manifests/{reference}][%d] getV2NameManifestsReferenceBadRequest  %+v", 400, o.Payload)
}

func (o *GetV2NameManifestsReferenceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV2NameManifestsReferenceBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV2NameManifestsReferenceUnauthorized creates a GetV2NameManifestsReferenceUnauthorized with default headers values
func NewGetV2NameManifestsReferenceUnauthorized() *GetV2NameManifestsReferenceUnauthorized {
	return &GetV2NameManifestsReferenceUnauthorized{}
}

/*GetV2NameManifestsReferenceUnauthorized handles this case with default header values.

Unauthorized access
*/
type GetV2NameManifestsReferenceUnauthorized struct {
	Payload *GetV2NameManifestsReferenceUnauthorizedBody
}

func (o *GetV2NameManifestsReferenceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/{name}/manifests/{reference}][%d] getV2NameManifestsReferenceUnauthorized  %+v", 401, o.Payload)
}

func (o *GetV2NameManifestsReferenceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV2NameManifestsReferenceUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV2NameManifestsReferenceNotFound creates a GetV2NameManifestsReferenceNotFound with default headers values
func NewGetV2NameManifestsReferenceNotFound() *GetV2NameManifestsReferenceNotFound {
	return &GetV2NameManifestsReferenceNotFound{}
}

/*GetV2NameManifestsReferenceNotFound handles this case with default header values.

The named manifest could not be found in the Registry
*/
type GetV2NameManifestsReferenceNotFound struct {
	Payload *GetV2NameManifestsReferenceNotFoundBody
}

func (o *GetV2NameManifestsReferenceNotFound) Error() string {
	return fmt.Sprintf("[GET /v2/{name}/manifests/{reference}][%d] getV2NameManifestsReferenceNotFound  %+v", 404, o.Payload)
}

func (o *GetV2NameManifestsReferenceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV2NameManifestsReferenceNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetV2NameManifestsReferenceBadRequestBody get v2 name manifests reference bad request body
swagger:model GetV2NameManifestsReferenceBadRequestBody
*/
type GetV2NameManifestsReferenceBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get v2 name manifests reference bad request body
func (o *GetV2NameManifestsReferenceBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV2NameManifestsReferenceBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV2NameManifestsReferenceBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV2NameManifestsReferenceBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV2NameManifestsReferenceBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetV2NameManifestsReferenceBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetV2NameManifestsReferenceNotFoundBody get v2 name manifests reference not found body
swagger:model GetV2NameManifestsReferenceNotFoundBody
*/
type GetV2NameManifestsReferenceNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get v2 name manifests reference not found body
func (o *GetV2NameManifestsReferenceNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV2NameManifestsReferenceNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV2NameManifestsReferenceNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV2NameManifestsReferenceNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV2NameManifestsReferenceNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetV2NameManifestsReferenceNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetV2NameManifestsReferenceOKBody get v2 name manifests reference o k body
swagger:model GetV2NameManifestsReferenceOKBody
*/
type GetV2NameManifestsReferenceOKBody struct {

	// data
	Data *models.Layers `json:"data,omitempty"`
}

// Validate validates this get v2 name manifests reference o k body
func (o *GetV2NameManifestsReferenceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV2NameManifestsReferenceOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV2NameManifestsReferenceOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV2NameManifestsReferenceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV2NameManifestsReferenceOKBody) UnmarshalBinary(b []byte) error {
	var res GetV2NameManifestsReferenceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetV2NameManifestsReferenceUnauthorizedBody get v2 name manifests reference unauthorized body
swagger:model GetV2NameManifestsReferenceUnauthorizedBody
*/
type GetV2NameManifestsReferenceUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get v2 name manifests reference unauthorized body
func (o *GetV2NameManifestsReferenceUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV2NameManifestsReferenceUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV2NameManifestsReferenceUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV2NameManifestsReferenceUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV2NameManifestsReferenceUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetV2NameManifestsReferenceUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
