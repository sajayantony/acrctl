// Code generated by go-swagger; DO NOT EDIT.

package manifest

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/sajayantony/acrctl/client"
)

// New creates a new manifest API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for manifest API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteV2NameManifestsReference Delete the manifest identified by name and reference where reference can be a tag or digest.
*/
func (a *Client) DeleteV2NameManifestsReference(params *DeleteV2NameManifestsReferenceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteV2NameManifestsReferenceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV2NameManifestsReferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteV2NameManifestsReference",
		Method:             "DELETE",
		PathPattern:        "/v2/{name}/manifests/{reference}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV2NameManifestsReferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV2NameManifestsReferenceAccepted), nil

}

/*
GetV2NameManifestsReference Pulls the image manifest file associated with the specified name and reference. Reference may be a tag or a digest
*/
func (a *Client) GetV2NameManifestsReference(params *GetV2NameManifestsReferenceParams, authInfo runtime.ClientAuthInfoWriter) (*GetV2NameManifestsReferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV2NameManifestsReferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetV2NameManifestsReference",
		Method:             "GET",
		PathPattern:        "/v2/{name}/manifests/{reference}",
		ProducesMediaTypes: []string{"application/vnd.docker.distribution.manifest.list.v2+json", "application/vnd.docker.distribution.manifest.v1+json", "application/vnd.docker.distribution.manifest.v1+prettyjws", "application/vnd.docker.distribution.manifest.v2+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV2NameManifestsReferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV2NameManifestsReferenceOK), nil

}

/*
PutV2NameManifestsReference Put the manifest identified by name and reference where reference can be a tag or digest.
*/
func (a *Client) PutV2NameManifestsReference(params *PutV2NameManifestsReferenceParams, authInfo runtime.ClientAuthInfoWriter) (*PutV2NameManifestsReferenceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV2NameManifestsReferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutV2NameManifestsReference",
		Method:             "PUT",
		PathPattern:        "/v2/{name}/manifests/{reference}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutV2NameManifestsReferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV2NameManifestsReferenceAccepted), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
