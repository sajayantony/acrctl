// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// PatchAcrV1NameTagsReferenceReader is a Reader for the PatchAcrV1NameTagsReference structure.
type PatchAcrV1NameTagsReferenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAcrV1NameTagsReferenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPatchAcrV1NameTagsReferenceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchAcrV1NameTagsReferenceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPatchAcrV1NameTagsReferenceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchAcrV1NameTagsReferenceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchAcrV1NameTagsReferenceNoContent creates a PatchAcrV1NameTagsReferenceNoContent with default headers values
func NewPatchAcrV1NameTagsReferenceNoContent() *PatchAcrV1NameTagsReferenceNoContent {
	return &PatchAcrV1NameTagsReferenceNoContent{}
}

/*PatchAcrV1NameTagsReferenceNoContent handles this case with default header values.

The attributes are updated
*/
type PatchAcrV1NameTagsReferenceNoContent struct {
}

func (o *PatchAcrV1NameTagsReferenceNoContent) Error() string {
	return fmt.Sprintf("[PATCH /acr/v1/{name}/_tags/{reference}][%d] patchAcrV1NameTagsReferenceNoContent ", 204)
}

func (o *PatchAcrV1NameTagsReferenceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchAcrV1NameTagsReferenceBadRequest creates a PatchAcrV1NameTagsReferenceBadRequest with default headers values
func NewPatchAcrV1NameTagsReferenceBadRequest() *PatchAcrV1NameTagsReferenceBadRequest {
	return &PatchAcrV1NameTagsReferenceBadRequest{}
}

/*PatchAcrV1NameTagsReferenceBadRequest handles this case with default header values.

On failure
*/
type PatchAcrV1NameTagsReferenceBadRequest struct {
	Payload *PatchAcrV1NameTagsReferenceBadRequestBody
}

func (o *PatchAcrV1NameTagsReferenceBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /acr/v1/{name}/_tags/{reference}][%d] patchAcrV1NameTagsReferenceBadRequest  %+v", 400, o.Payload)
}

func (o *PatchAcrV1NameTagsReferenceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAcrV1NameTagsReferenceBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAcrV1NameTagsReferenceUnauthorized creates a PatchAcrV1NameTagsReferenceUnauthorized with default headers values
func NewPatchAcrV1NameTagsReferenceUnauthorized() *PatchAcrV1NameTagsReferenceUnauthorized {
	return &PatchAcrV1NameTagsReferenceUnauthorized{}
}

/*PatchAcrV1NameTagsReferenceUnauthorized handles this case with default header values.

Unauthorized access
*/
type PatchAcrV1NameTagsReferenceUnauthorized struct {
	Payload *PatchAcrV1NameTagsReferenceUnauthorizedBody
}

func (o *PatchAcrV1NameTagsReferenceUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /acr/v1/{name}/_tags/{reference}][%d] patchAcrV1NameTagsReferenceUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchAcrV1NameTagsReferenceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAcrV1NameTagsReferenceUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAcrV1NameTagsReferenceNotFound creates a PatchAcrV1NameTagsReferenceNotFound with default headers values
func NewPatchAcrV1NameTagsReferenceNotFound() *PatchAcrV1NameTagsReferenceNotFound {
	return &PatchAcrV1NameTagsReferenceNotFound{}
}

/*PatchAcrV1NameTagsReferenceNotFound handles this case with default header values.

The repository or tag is unknown
*/
type PatchAcrV1NameTagsReferenceNotFound struct {
	Payload *PatchAcrV1NameTagsReferenceNotFoundBody
}

func (o *PatchAcrV1NameTagsReferenceNotFound) Error() string {
	return fmt.Sprintf("[PATCH /acr/v1/{name}/_tags/{reference}][%d] patchAcrV1NameTagsReferenceNotFound  %+v", 404, o.Payload)
}

func (o *PatchAcrV1NameTagsReferenceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAcrV1NameTagsReferenceNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchAcrV1NameTagsReferenceBadRequestBody patch acr v1 name tags reference bad request body
swagger:model PatchAcrV1NameTagsReferenceBadRequestBody
*/
type PatchAcrV1NameTagsReferenceBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this patch acr v1 name tags reference bad request body
func (o *PatchAcrV1NameTagsReferenceBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAcrV1NameTagsReferenceBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchAcrV1NameTagsReferenceBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAcrV1NameTagsReferenceBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAcrV1NameTagsReferenceBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PatchAcrV1NameTagsReferenceBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAcrV1NameTagsReferenceNotFoundBody patch acr v1 name tags reference not found body
swagger:model PatchAcrV1NameTagsReferenceNotFoundBody
*/
type PatchAcrV1NameTagsReferenceNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this patch acr v1 name tags reference not found body
func (o *PatchAcrV1NameTagsReferenceNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAcrV1NameTagsReferenceNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchAcrV1NameTagsReferenceNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAcrV1NameTagsReferenceNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAcrV1NameTagsReferenceNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PatchAcrV1NameTagsReferenceNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAcrV1NameTagsReferenceUnauthorizedBody patch acr v1 name tags reference unauthorized body
swagger:model PatchAcrV1NameTagsReferenceUnauthorizedBody
*/
type PatchAcrV1NameTagsReferenceUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this patch acr v1 name tags reference unauthorized body
func (o *PatchAcrV1NameTagsReferenceUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAcrV1NameTagsReferenceUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchAcrV1NameTagsReferenceUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAcrV1NameTagsReferenceUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAcrV1NameTagsReferenceUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PatchAcrV1NameTagsReferenceUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
