// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// GetAcrV1NameMetadataReader is a Reader for the GetAcrV1NameMetadata structure.
type GetAcrV1NameMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAcrV1NameMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAcrV1NameMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAcrV1NameMetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetAcrV1NameMetadataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetAcrV1NameMetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAcrV1NameMetadataOK creates a GetAcrV1NameMetadataOK with default headers values
func NewGetAcrV1NameMetadataOK() *GetAcrV1NameMetadataOK {
	return &GetAcrV1NameMetadataOK{}
}

/*GetAcrV1NameMetadataOK handles this case with default header values.

Returns a list of repository metadata
*/
type GetAcrV1NameMetadataOK struct {
	Payload *GetAcrV1NameMetadataOKBody
}

func (o *GetAcrV1NameMetadataOK) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_metadata][%d] getAcrV1NameMetadataOK  %+v", 200, o.Payload)
}

func (o *GetAcrV1NameMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameMetadataOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameMetadataBadRequest creates a GetAcrV1NameMetadataBadRequest with default headers values
func NewGetAcrV1NameMetadataBadRequest() *GetAcrV1NameMetadataBadRequest {
	return &GetAcrV1NameMetadataBadRequest{}
}

/*GetAcrV1NameMetadataBadRequest handles this case with default header values.

On failure
*/
type GetAcrV1NameMetadataBadRequest struct {
	Payload *GetAcrV1NameMetadataBadRequestBody
}

func (o *GetAcrV1NameMetadataBadRequest) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_metadata][%d] getAcrV1NameMetadataBadRequest  %+v", 400, o.Payload)
}

func (o *GetAcrV1NameMetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameMetadataBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameMetadataUnauthorized creates a GetAcrV1NameMetadataUnauthorized with default headers values
func NewGetAcrV1NameMetadataUnauthorized() *GetAcrV1NameMetadataUnauthorized {
	return &GetAcrV1NameMetadataUnauthorized{}
}

/*GetAcrV1NameMetadataUnauthorized handles this case with default header values.

Unauthorized access
*/
type GetAcrV1NameMetadataUnauthorized struct {
	Payload *GetAcrV1NameMetadataUnauthorizedBody
}

func (o *GetAcrV1NameMetadataUnauthorized) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_metadata][%d] getAcrV1NameMetadataUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAcrV1NameMetadataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameMetadataUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameMetadataNotFound creates a GetAcrV1NameMetadataNotFound with default headers values
func NewGetAcrV1NameMetadataNotFound() *GetAcrV1NameMetadataNotFound {
	return &GetAcrV1NameMetadataNotFound{}
}

/*GetAcrV1NameMetadataNotFound handles this case with default header values.

The repository is unknown to the registry.
*/
type GetAcrV1NameMetadataNotFound struct {
	Payload *GetAcrV1NameMetadataNotFoundBody
}

func (o *GetAcrV1NameMetadataNotFound) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_metadata][%d] getAcrV1NameMetadataNotFound  %+v", 404, o.Payload)
}

func (o *GetAcrV1NameMetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameMetadataNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetAcrV1NameMetadataBadRequestBody get acr v1 name metadata bad request body
swagger:model GetAcrV1NameMetadataBadRequestBody
*/
type GetAcrV1NameMetadataBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name metadata bad request body
func (o *GetAcrV1NameMetadataBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameMetadataBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameMetadataBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameMetadataBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameMetadataBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameMetadataBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameMetadataNotFoundBody get acr v1 name metadata not found body
swagger:model GetAcrV1NameMetadataNotFoundBody
*/
type GetAcrV1NameMetadataNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name metadata not found body
func (o *GetAcrV1NameMetadataNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameMetadataNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameMetadataNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameMetadataNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameMetadataNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameMetadataNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameMetadataOKBody get acr v1 name metadata o k body
swagger:model GetAcrV1NameMetadataOKBody
*/
type GetAcrV1NameMetadataOKBody struct {

	// data
	Data *models.RepositoryMetadata `json:"data,omitempty"`
}

// Validate validates this get acr v1 name metadata o k body
func (o *GetAcrV1NameMetadataOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameMetadataOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameMetadataOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameMetadataOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameMetadataOKBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameMetadataOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameMetadataUnauthorizedBody get acr v1 name metadata unauthorized body
swagger:model GetAcrV1NameMetadataUnauthorizedBody
*/
type GetAcrV1NameMetadataUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name metadata unauthorized body
func (o *GetAcrV1NameMetadataUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameMetadataUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameMetadataUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameMetadataUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameMetadataUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameMetadataUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
