// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// DeleteAcrV1NameTagsReferenceReader is a Reader for the DeleteAcrV1NameTagsReference structure.
type DeleteAcrV1NameTagsReferenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAcrV1NameTagsReferenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewDeleteAcrV1NameTagsReferenceAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteAcrV1NameTagsReferenceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDeleteAcrV1NameTagsReferenceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteAcrV1NameTagsReferenceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteAcrV1NameTagsReferenceAccepted creates a DeleteAcrV1NameTagsReferenceAccepted with default headers values
func NewDeleteAcrV1NameTagsReferenceAccepted() *DeleteAcrV1NameTagsReferenceAccepted {
	return &DeleteAcrV1NameTagsReferenceAccepted{}
}

/*DeleteAcrV1NameTagsReferenceAccepted handles this case with default header values.

The tag is deleted
*/
type DeleteAcrV1NameTagsReferenceAccepted struct {
}

func (o *DeleteAcrV1NameTagsReferenceAccepted) Error() string {
	return fmt.Sprintf("[DELETE /acr/v1/{name}/_tags/{reference}][%d] deleteAcrV1NameTagsReferenceAccepted ", 202)
}

func (o *DeleteAcrV1NameTagsReferenceAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAcrV1NameTagsReferenceBadRequest creates a DeleteAcrV1NameTagsReferenceBadRequest with default headers values
func NewDeleteAcrV1NameTagsReferenceBadRequest() *DeleteAcrV1NameTagsReferenceBadRequest {
	return &DeleteAcrV1NameTagsReferenceBadRequest{}
}

/*DeleteAcrV1NameTagsReferenceBadRequest handles this case with default header values.

On failure
*/
type DeleteAcrV1NameTagsReferenceBadRequest struct {
	Payload *DeleteAcrV1NameTagsReferenceBadRequestBody
}

func (o *DeleteAcrV1NameTagsReferenceBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /acr/v1/{name}/_tags/{reference}][%d] deleteAcrV1NameTagsReferenceBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteAcrV1NameTagsReferenceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteAcrV1NameTagsReferenceBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAcrV1NameTagsReferenceUnauthorized creates a DeleteAcrV1NameTagsReferenceUnauthorized with default headers values
func NewDeleteAcrV1NameTagsReferenceUnauthorized() *DeleteAcrV1NameTagsReferenceUnauthorized {
	return &DeleteAcrV1NameTagsReferenceUnauthorized{}
}

/*DeleteAcrV1NameTagsReferenceUnauthorized handles this case with default header values.

Unauthorized access
*/
type DeleteAcrV1NameTagsReferenceUnauthorized struct {
	Payload *DeleteAcrV1NameTagsReferenceUnauthorizedBody
}

func (o *DeleteAcrV1NameTagsReferenceUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /acr/v1/{name}/_tags/{reference}][%d] deleteAcrV1NameTagsReferenceUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteAcrV1NameTagsReferenceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteAcrV1NameTagsReferenceUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAcrV1NameTagsReferenceNotFound creates a DeleteAcrV1NameTagsReferenceNotFound with default headers values
func NewDeleteAcrV1NameTagsReferenceNotFound() *DeleteAcrV1NameTagsReferenceNotFound {
	return &DeleteAcrV1NameTagsReferenceNotFound{}
}

/*DeleteAcrV1NameTagsReferenceNotFound handles this case with default header values.

The repository or tag is unknown to the registry.
*/
type DeleteAcrV1NameTagsReferenceNotFound struct {
	Payload *DeleteAcrV1NameTagsReferenceNotFoundBody
}

func (o *DeleteAcrV1NameTagsReferenceNotFound) Error() string {
	return fmt.Sprintf("[DELETE /acr/v1/{name}/_tags/{reference}][%d] deleteAcrV1NameTagsReferenceNotFound  %+v", 404, o.Payload)
}

func (o *DeleteAcrV1NameTagsReferenceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteAcrV1NameTagsReferenceNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DeleteAcrV1NameTagsReferenceBadRequestBody delete acr v1 name tags reference bad request body
swagger:model DeleteAcrV1NameTagsReferenceBadRequestBody
*/
type DeleteAcrV1NameTagsReferenceBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this delete acr v1 name tags reference bad request body
func (o *DeleteAcrV1NameTagsReferenceBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteAcrV1NameTagsReferenceBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteAcrV1NameTagsReferenceBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteAcrV1NameTagsReferenceBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteAcrV1NameTagsReferenceBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteAcrV1NameTagsReferenceBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteAcrV1NameTagsReferenceNotFoundBody delete acr v1 name tags reference not found body
swagger:model DeleteAcrV1NameTagsReferenceNotFoundBody
*/
type DeleteAcrV1NameTagsReferenceNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this delete acr v1 name tags reference not found body
func (o *DeleteAcrV1NameTagsReferenceNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteAcrV1NameTagsReferenceNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteAcrV1NameTagsReferenceNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteAcrV1NameTagsReferenceNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteAcrV1NameTagsReferenceNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteAcrV1NameTagsReferenceNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteAcrV1NameTagsReferenceUnauthorizedBody delete acr v1 name tags reference unauthorized body
swagger:model DeleteAcrV1NameTagsReferenceUnauthorizedBody
*/
type DeleteAcrV1NameTagsReferenceUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this delete acr v1 name tags reference unauthorized body
func (o *DeleteAcrV1NameTagsReferenceUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteAcrV1NameTagsReferenceUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteAcrV1NameTagsReferenceUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteAcrV1NameTagsReferenceUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteAcrV1NameTagsReferenceUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res DeleteAcrV1NameTagsReferenceUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
