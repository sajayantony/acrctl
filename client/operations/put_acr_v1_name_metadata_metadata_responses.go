// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// PutAcrV1NameMetadataMetadataReader is a Reader for the PutAcrV1NameMetadataMetadata structure.
type PutAcrV1NameMetadataMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutAcrV1NameMetadataMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPutAcrV1NameMetadataMetadataCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutAcrV1NameMetadataMetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutAcrV1NameMetadataMetadataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutAcrV1NameMetadataMetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutAcrV1NameMetadataMetadataCreated creates a PutAcrV1NameMetadataMetadataCreated with default headers values
func NewPutAcrV1NameMetadataMetadataCreated() *PutAcrV1NameMetadataMetadataCreated {
	return &PutAcrV1NameMetadataMetadataCreated{}
}

/*PutAcrV1NameMetadataMetadataCreated handles this case with default header values.

The metadata is added/updated
*/
type PutAcrV1NameMetadataMetadataCreated struct {
}

func (o *PutAcrV1NameMetadataMetadataCreated) Error() string {
	return fmt.Sprintf("[PUT /acr/v1/{name}/_metadata/{metadata}][%d] putAcrV1NameMetadataMetadataCreated ", 201)
}

func (o *PutAcrV1NameMetadataMetadataCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutAcrV1NameMetadataMetadataBadRequest creates a PutAcrV1NameMetadataMetadataBadRequest with default headers values
func NewPutAcrV1NameMetadataMetadataBadRequest() *PutAcrV1NameMetadataMetadataBadRequest {
	return &PutAcrV1NameMetadataMetadataBadRequest{}
}

/*PutAcrV1NameMetadataMetadataBadRequest handles this case with default header values.

On failure
*/
type PutAcrV1NameMetadataMetadataBadRequest struct {
	Payload *PutAcrV1NameMetadataMetadataBadRequestBody
}

func (o *PutAcrV1NameMetadataMetadataBadRequest) Error() string {
	return fmt.Sprintf("[PUT /acr/v1/{name}/_metadata/{metadata}][%d] putAcrV1NameMetadataMetadataBadRequest  %+v", 400, o.Payload)
}

func (o *PutAcrV1NameMetadataMetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutAcrV1NameMetadataMetadataBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAcrV1NameMetadataMetadataUnauthorized creates a PutAcrV1NameMetadataMetadataUnauthorized with default headers values
func NewPutAcrV1NameMetadataMetadataUnauthorized() *PutAcrV1NameMetadataMetadataUnauthorized {
	return &PutAcrV1NameMetadataMetadataUnauthorized{}
}

/*PutAcrV1NameMetadataMetadataUnauthorized handles this case with default header values.

Unauthorized access
*/
type PutAcrV1NameMetadataMetadataUnauthorized struct {
	Payload *PutAcrV1NameMetadataMetadataUnauthorizedBody
}

func (o *PutAcrV1NameMetadataMetadataUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /acr/v1/{name}/_metadata/{metadata}][%d] putAcrV1NameMetadataMetadataUnauthorized  %+v", 401, o.Payload)
}

func (o *PutAcrV1NameMetadataMetadataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutAcrV1NameMetadataMetadataUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAcrV1NameMetadataMetadataNotFound creates a PutAcrV1NameMetadataMetadataNotFound with default headers values
func NewPutAcrV1NameMetadataMetadataNotFound() *PutAcrV1NameMetadataMetadataNotFound {
	return &PutAcrV1NameMetadataMetadataNotFound{}
}

/*PutAcrV1NameMetadataMetadataNotFound handles this case with default header values.

The repository or metadata is unknown
*/
type PutAcrV1NameMetadataMetadataNotFound struct {
	Payload *PutAcrV1NameMetadataMetadataNotFoundBody
}

func (o *PutAcrV1NameMetadataMetadataNotFound) Error() string {
	return fmt.Sprintf("[PUT /acr/v1/{name}/_metadata/{metadata}][%d] putAcrV1NameMetadataMetadataNotFound  %+v", 404, o.Payload)
}

func (o *PutAcrV1NameMetadataMetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutAcrV1NameMetadataMetadataNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PutAcrV1NameMetadataMetadataBadRequestBody put acr v1 name metadata metadata bad request body
swagger:model PutAcrV1NameMetadataMetadataBadRequestBody
*/
type PutAcrV1NameMetadataMetadataBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this put acr v1 name metadata metadata bad request body
func (o *PutAcrV1NameMetadataMetadataBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutAcrV1NameMetadataMetadataBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putAcrV1NameMetadataMetadataBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutAcrV1NameMetadataMetadataBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAcrV1NameMetadataMetadataBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutAcrV1NameMetadataMetadataBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutAcrV1NameMetadataMetadataNotFoundBody put acr v1 name metadata metadata not found body
swagger:model PutAcrV1NameMetadataMetadataNotFoundBody
*/
type PutAcrV1NameMetadataMetadataNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this put acr v1 name metadata metadata not found body
func (o *PutAcrV1NameMetadataMetadataNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutAcrV1NameMetadataMetadataNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putAcrV1NameMetadataMetadataNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutAcrV1NameMetadataMetadataNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAcrV1NameMetadataMetadataNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutAcrV1NameMetadataMetadataNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutAcrV1NameMetadataMetadataUnauthorizedBody put acr v1 name metadata metadata unauthorized body
swagger:model PutAcrV1NameMetadataMetadataUnauthorizedBody
*/
type PutAcrV1NameMetadataMetadataUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this put acr v1 name metadata metadata unauthorized body
func (o *PutAcrV1NameMetadataMetadataUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutAcrV1NameMetadataMetadataUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putAcrV1NameMetadataMetadataUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutAcrV1NameMetadataMetadataUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAcrV1NameMetadataMetadataUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PutAcrV1NameMetadataMetadataUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
