// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// GetAcrV1NameManifestsReferenceMetadataReader is a Reader for the GetAcrV1NameManifestsReferenceMetadata structure.
type GetAcrV1NameManifestsReferenceMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAcrV1NameManifestsReferenceMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAcrV1NameManifestsReferenceMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAcrV1NameManifestsReferenceMetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetAcrV1NameManifestsReferenceMetadataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetAcrV1NameManifestsReferenceMetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAcrV1NameManifestsReferenceMetadataOK creates a GetAcrV1NameManifestsReferenceMetadataOK with default headers values
func NewGetAcrV1NameManifestsReferenceMetadataOK() *GetAcrV1NameManifestsReferenceMetadataOK {
	return &GetAcrV1NameManifestsReferenceMetadataOK{}
}

/*GetAcrV1NameManifestsReferenceMetadataOK handles this case with default header values.

Returns a list of manifest metadata
*/
type GetAcrV1NameManifestsReferenceMetadataOK struct {
	Payload *GetAcrV1NameManifestsReferenceMetadataOKBody
}

func (o *GetAcrV1NameManifestsReferenceMetadataOK) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_manifests/{reference}/_metadata][%d] getAcrV1NameManifestsReferenceMetadataOK  %+v", 200, o.Payload)
}

func (o *GetAcrV1NameManifestsReferenceMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameManifestsReferenceMetadataOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameManifestsReferenceMetadataBadRequest creates a GetAcrV1NameManifestsReferenceMetadataBadRequest with default headers values
func NewGetAcrV1NameManifestsReferenceMetadataBadRequest() *GetAcrV1NameManifestsReferenceMetadataBadRequest {
	return &GetAcrV1NameManifestsReferenceMetadataBadRequest{}
}

/*GetAcrV1NameManifestsReferenceMetadataBadRequest handles this case with default header values.

On failure
*/
type GetAcrV1NameManifestsReferenceMetadataBadRequest struct {
	Payload *GetAcrV1NameManifestsReferenceMetadataBadRequestBody
}

func (o *GetAcrV1NameManifestsReferenceMetadataBadRequest) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_manifests/{reference}/_metadata][%d] getAcrV1NameManifestsReferenceMetadataBadRequest  %+v", 400, o.Payload)
}

func (o *GetAcrV1NameManifestsReferenceMetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameManifestsReferenceMetadataBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameManifestsReferenceMetadataUnauthorized creates a GetAcrV1NameManifestsReferenceMetadataUnauthorized with default headers values
func NewGetAcrV1NameManifestsReferenceMetadataUnauthorized() *GetAcrV1NameManifestsReferenceMetadataUnauthorized {
	return &GetAcrV1NameManifestsReferenceMetadataUnauthorized{}
}

/*GetAcrV1NameManifestsReferenceMetadataUnauthorized handles this case with default header values.

Unauthorized access
*/
type GetAcrV1NameManifestsReferenceMetadataUnauthorized struct {
	Payload *GetAcrV1NameManifestsReferenceMetadataUnauthorizedBody
}

func (o *GetAcrV1NameManifestsReferenceMetadataUnauthorized) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_manifests/{reference}/_metadata][%d] getAcrV1NameManifestsReferenceMetadataUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAcrV1NameManifestsReferenceMetadataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameManifestsReferenceMetadataUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameManifestsReferenceMetadataNotFound creates a GetAcrV1NameManifestsReferenceMetadataNotFound with default headers values
func NewGetAcrV1NameManifestsReferenceMetadataNotFound() *GetAcrV1NameManifestsReferenceMetadataNotFound {
	return &GetAcrV1NameManifestsReferenceMetadataNotFound{}
}

/*GetAcrV1NameManifestsReferenceMetadataNotFound handles this case with default header values.

The repository or manifest is unknown to the registry.
*/
type GetAcrV1NameManifestsReferenceMetadataNotFound struct {
	Payload *GetAcrV1NameManifestsReferenceMetadataNotFoundBody
}

func (o *GetAcrV1NameManifestsReferenceMetadataNotFound) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_manifests/{reference}/_metadata][%d] getAcrV1NameManifestsReferenceMetadataNotFound  %+v", 404, o.Payload)
}

func (o *GetAcrV1NameManifestsReferenceMetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameManifestsReferenceMetadataNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetAcrV1NameManifestsReferenceMetadataBadRequestBody get acr v1 name manifests reference metadata bad request body
swagger:model GetAcrV1NameManifestsReferenceMetadataBadRequestBody
*/
type GetAcrV1NameManifestsReferenceMetadataBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name manifests reference metadata bad request body
func (o *GetAcrV1NameManifestsReferenceMetadataBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameManifestsReferenceMetadataBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameManifestsReferenceMetadataBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceMetadataBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceMetadataBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameManifestsReferenceMetadataBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameManifestsReferenceMetadataNotFoundBody get acr v1 name manifests reference metadata not found body
swagger:model GetAcrV1NameManifestsReferenceMetadataNotFoundBody
*/
type GetAcrV1NameManifestsReferenceMetadataNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name manifests reference metadata not found body
func (o *GetAcrV1NameManifestsReferenceMetadataNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameManifestsReferenceMetadataNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameManifestsReferenceMetadataNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceMetadataNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceMetadataNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameManifestsReferenceMetadataNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameManifestsReferenceMetadataOKBody get acr v1 name manifests reference metadata o k body
swagger:model GetAcrV1NameManifestsReferenceMetadataOKBody
*/
type GetAcrV1NameManifestsReferenceMetadataOKBody struct {

	// data
	Data *models.ManifestMetadataList `json:"data,omitempty"`
}

// Validate validates this get acr v1 name manifests reference metadata o k body
func (o *GetAcrV1NameManifestsReferenceMetadataOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameManifestsReferenceMetadataOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameManifestsReferenceMetadataOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceMetadataOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceMetadataOKBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameManifestsReferenceMetadataOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameManifestsReferenceMetadataUnauthorizedBody get acr v1 name manifests reference metadata unauthorized body
swagger:model GetAcrV1NameManifestsReferenceMetadataUnauthorizedBody
*/
type GetAcrV1NameManifestsReferenceMetadataUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name manifests reference metadata unauthorized body
func (o *GetAcrV1NameManifestsReferenceMetadataUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameManifestsReferenceMetadataUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameManifestsReferenceMetadataUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceMetadataUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceMetadataUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameManifestsReferenceMetadataUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
