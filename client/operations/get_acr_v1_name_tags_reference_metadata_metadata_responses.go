// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// GetAcrV1NameTagsReferenceMetadataMetadataReader is a Reader for the GetAcrV1NameTagsReferenceMetadataMetadata structure.
type GetAcrV1NameTagsReferenceMetadataMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAcrV1NameTagsReferenceMetadataMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAcrV1NameTagsReferenceMetadataMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAcrV1NameTagsReferenceMetadataMetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetAcrV1NameTagsReferenceMetadataMetadataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetAcrV1NameTagsReferenceMetadataMetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAcrV1NameTagsReferenceMetadataMetadataOK creates a GetAcrV1NameTagsReferenceMetadataMetadataOK with default headers values
func NewGetAcrV1NameTagsReferenceMetadataMetadataOK() *GetAcrV1NameTagsReferenceMetadataMetadataOK {
	return &GetAcrV1NameTagsReferenceMetadataMetadataOK{}
}

/*GetAcrV1NameTagsReferenceMetadataMetadataOK handles this case with default header values.

Returns the metadata value
*/
type GetAcrV1NameTagsReferenceMetadataMetadataOK struct {
	Payload string
}

func (o *GetAcrV1NameTagsReferenceMetadataMetadataOK) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_tags/{reference}/_metadata/{metadata}][%d] getAcrV1NameTagsReferenceMetadataMetadataOK  %+v", 200, o.Payload)
}

func (o *GetAcrV1NameTagsReferenceMetadataMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameTagsReferenceMetadataMetadataBadRequest creates a GetAcrV1NameTagsReferenceMetadataMetadataBadRequest with default headers values
func NewGetAcrV1NameTagsReferenceMetadataMetadataBadRequest() *GetAcrV1NameTagsReferenceMetadataMetadataBadRequest {
	return &GetAcrV1NameTagsReferenceMetadataMetadataBadRequest{}
}

/*GetAcrV1NameTagsReferenceMetadataMetadataBadRequest handles this case with default header values.

On failure
*/
type GetAcrV1NameTagsReferenceMetadataMetadataBadRequest struct {
	Payload *GetAcrV1NameTagsReferenceMetadataMetadataBadRequestBody
}

func (o *GetAcrV1NameTagsReferenceMetadataMetadataBadRequest) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_tags/{reference}/_metadata/{metadata}][%d] getAcrV1NameTagsReferenceMetadataMetadataBadRequest  %+v", 400, o.Payload)
}

func (o *GetAcrV1NameTagsReferenceMetadataMetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameTagsReferenceMetadataMetadataBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameTagsReferenceMetadataMetadataUnauthorized creates a GetAcrV1NameTagsReferenceMetadataMetadataUnauthorized with default headers values
func NewGetAcrV1NameTagsReferenceMetadataMetadataUnauthorized() *GetAcrV1NameTagsReferenceMetadataMetadataUnauthorized {
	return &GetAcrV1NameTagsReferenceMetadataMetadataUnauthorized{}
}

/*GetAcrV1NameTagsReferenceMetadataMetadataUnauthorized handles this case with default header values.

Unauthorized access
*/
type GetAcrV1NameTagsReferenceMetadataMetadataUnauthorized struct {
	Payload *GetAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody
}

func (o *GetAcrV1NameTagsReferenceMetadataMetadataUnauthorized) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_tags/{reference}/_metadata/{metadata}][%d] getAcrV1NameTagsReferenceMetadataMetadataUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAcrV1NameTagsReferenceMetadataMetadataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameTagsReferenceMetadataMetadataNotFound creates a GetAcrV1NameTagsReferenceMetadataMetadataNotFound with default headers values
func NewGetAcrV1NameTagsReferenceMetadataMetadataNotFound() *GetAcrV1NameTagsReferenceMetadataMetadataNotFound {
	return &GetAcrV1NameTagsReferenceMetadataMetadataNotFound{}
}

/*GetAcrV1NameTagsReferenceMetadataMetadataNotFound handles this case with default header values.

The repository, tag or the metadata is unknown to the registry.
*/
type GetAcrV1NameTagsReferenceMetadataMetadataNotFound struct {
	Payload *GetAcrV1NameTagsReferenceMetadataMetadataNotFoundBody
}

func (o *GetAcrV1NameTagsReferenceMetadataMetadataNotFound) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_tags/{reference}/_metadata/{metadata}][%d] getAcrV1NameTagsReferenceMetadataMetadataNotFound  %+v", 404, o.Payload)
}

func (o *GetAcrV1NameTagsReferenceMetadataMetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameTagsReferenceMetadataMetadataNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetAcrV1NameTagsReferenceMetadataMetadataBadRequestBody get acr v1 name tags reference metadata metadata bad request body
swagger:model GetAcrV1NameTagsReferenceMetadataMetadataBadRequestBody
*/
type GetAcrV1NameTagsReferenceMetadataMetadataBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name tags reference metadata metadata bad request body
func (o *GetAcrV1NameTagsReferenceMetadataMetadataBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameTagsReferenceMetadataMetadataBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameTagsReferenceMetadataMetadataBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameTagsReferenceMetadataMetadataBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameTagsReferenceMetadataMetadataBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameTagsReferenceMetadataMetadataBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameTagsReferenceMetadataMetadataNotFoundBody get acr v1 name tags reference metadata metadata not found body
swagger:model GetAcrV1NameTagsReferenceMetadataMetadataNotFoundBody
*/
type GetAcrV1NameTagsReferenceMetadataMetadataNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name tags reference metadata metadata not found body
func (o *GetAcrV1NameTagsReferenceMetadataMetadataNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameTagsReferenceMetadataMetadataNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameTagsReferenceMetadataMetadataNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameTagsReferenceMetadataMetadataNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameTagsReferenceMetadataMetadataNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameTagsReferenceMetadataMetadataNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody get acr v1 name tags reference metadata metadata unauthorized body
swagger:model GetAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody
*/
type GetAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name tags reference metadata metadata unauthorized body
func (o *GetAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameTagsReferenceMetadataMetadataUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
