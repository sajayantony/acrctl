// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// DeleteAcrV1NameTagsReferenceMetadataMetadataReader is a Reader for the DeleteAcrV1NameTagsReferenceMetadataMetadata structure.
type DeleteAcrV1NameTagsReferenceMetadataMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewDeleteAcrV1NameTagsReferenceMetadataMetadataAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteAcrV1NameTagsReferenceMetadataMetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteAcrV1NameTagsReferenceMetadataMetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteAcrV1NameTagsReferenceMetadataMetadataAccepted creates a DeleteAcrV1NameTagsReferenceMetadataMetadataAccepted with default headers values
func NewDeleteAcrV1NameTagsReferenceMetadataMetadataAccepted() *DeleteAcrV1NameTagsReferenceMetadataMetadataAccepted {
	return &DeleteAcrV1NameTagsReferenceMetadataMetadataAccepted{}
}

/*DeleteAcrV1NameTagsReferenceMetadataMetadataAccepted handles this case with default header values.

metadata is deleted
*/
type DeleteAcrV1NameTagsReferenceMetadataMetadataAccepted struct {
}

func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataAccepted) Error() string {
	return fmt.Sprintf("[DELETE /acr/v1/{name}/_tags/{reference}/_metadata/{metadata}][%d] deleteAcrV1NameTagsReferenceMetadataMetadataAccepted ", 202)
}

func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAcrV1NameTagsReferenceMetadataMetadataBadRequest creates a DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequest with default headers values
func NewDeleteAcrV1NameTagsReferenceMetadataMetadataBadRequest() *DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequest {
	return &DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequest{}
}

/*DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequest handles this case with default header values.

On failure
*/
type DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequest struct {
	Payload *DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequestBody
}

func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /acr/v1/{name}/_tags/{reference}/_metadata/{metadata}][%d] deleteAcrV1NameTagsReferenceMetadataMetadataBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorized creates a DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorized with default headers values
func NewDeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorized() *DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorized {
	return &DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorized{}
}

/*DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorized handles this case with default header values.

Unauthorized access
*/
type DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorized struct {
	Payload *DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody
}

func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /acr/v1/{name}/_tags/{reference}/_metadata/{metadata}][%d] deleteAcrV1NameTagsReferenceMetadataMetadataUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAcrV1NameTagsReferenceMetadataMetadataNotFound creates a DeleteAcrV1NameTagsReferenceMetadataMetadataNotFound with default headers values
func NewDeleteAcrV1NameTagsReferenceMetadataMetadataNotFound() *DeleteAcrV1NameTagsReferenceMetadataMetadataNotFound {
	return &DeleteAcrV1NameTagsReferenceMetadataMetadataNotFound{}
}

/*DeleteAcrV1NameTagsReferenceMetadataMetadataNotFound handles this case with default header values.

The repository, tag or metadata is unknown to the registry.
*/
type DeleteAcrV1NameTagsReferenceMetadataMetadataNotFound struct {
	Payload *DeleteAcrV1NameTagsReferenceMetadataMetadataNotFoundBody
}

func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataNotFound) Error() string {
	return fmt.Sprintf("[DELETE /acr/v1/{name}/_tags/{reference}/_metadata/{metadata}][%d] deleteAcrV1NameTagsReferenceMetadataMetadataNotFound  %+v", 404, o.Payload)
}

func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteAcrV1NameTagsReferenceMetadataMetadataNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequestBody delete acr v1 name tags reference metadata metadata bad request body
swagger:model DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequestBody
*/
type DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this delete acr v1 name tags reference metadata metadata bad request body
func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteAcrV1NameTagsReferenceMetadataMetadataBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteAcrV1NameTagsReferenceMetadataMetadataBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteAcrV1NameTagsReferenceMetadataMetadataNotFoundBody delete acr v1 name tags reference metadata metadata not found body
swagger:model DeleteAcrV1NameTagsReferenceMetadataMetadataNotFoundBody
*/
type DeleteAcrV1NameTagsReferenceMetadataMetadataNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this delete acr v1 name tags reference metadata metadata not found body
func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteAcrV1NameTagsReferenceMetadataMetadataNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteAcrV1NameTagsReferenceMetadataMetadataNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody delete acr v1 name tags reference metadata metadata unauthorized body
swagger:model DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody
*/
type DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this delete acr v1 name tags reference metadata metadata unauthorized body
func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteAcrV1NameTagsReferenceMetadataMetadataUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res DeleteAcrV1NameTagsReferenceMetadataMetadataUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
