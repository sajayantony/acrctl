// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// GetAcrV1NameTagsReferenceMetadataReader is a Reader for the GetAcrV1NameTagsReferenceMetadata structure.
type GetAcrV1NameTagsReferenceMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAcrV1NameTagsReferenceMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAcrV1NameTagsReferenceMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAcrV1NameTagsReferenceMetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetAcrV1NameTagsReferenceMetadataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetAcrV1NameTagsReferenceMetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAcrV1NameTagsReferenceMetadataOK creates a GetAcrV1NameTagsReferenceMetadataOK with default headers values
func NewGetAcrV1NameTagsReferenceMetadataOK() *GetAcrV1NameTagsReferenceMetadataOK {
	return &GetAcrV1NameTagsReferenceMetadataOK{}
}

/*GetAcrV1NameTagsReferenceMetadataOK handles this case with default header values.

Returns a list of tag metadata
*/
type GetAcrV1NameTagsReferenceMetadataOK struct {
	Payload *GetAcrV1NameTagsReferenceMetadataOKBody
}

func (o *GetAcrV1NameTagsReferenceMetadataOK) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_tags/{reference}/_metadata][%d] getAcrV1NameTagsReferenceMetadataOK  %+v", 200, o.Payload)
}

func (o *GetAcrV1NameTagsReferenceMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameTagsReferenceMetadataOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameTagsReferenceMetadataBadRequest creates a GetAcrV1NameTagsReferenceMetadataBadRequest with default headers values
func NewGetAcrV1NameTagsReferenceMetadataBadRequest() *GetAcrV1NameTagsReferenceMetadataBadRequest {
	return &GetAcrV1NameTagsReferenceMetadataBadRequest{}
}

/*GetAcrV1NameTagsReferenceMetadataBadRequest handles this case with default header values.

On failure
*/
type GetAcrV1NameTagsReferenceMetadataBadRequest struct {
	Payload *GetAcrV1NameTagsReferenceMetadataBadRequestBody
}

func (o *GetAcrV1NameTagsReferenceMetadataBadRequest) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_tags/{reference}/_metadata][%d] getAcrV1NameTagsReferenceMetadataBadRequest  %+v", 400, o.Payload)
}

func (o *GetAcrV1NameTagsReferenceMetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameTagsReferenceMetadataBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameTagsReferenceMetadataUnauthorized creates a GetAcrV1NameTagsReferenceMetadataUnauthorized with default headers values
func NewGetAcrV1NameTagsReferenceMetadataUnauthorized() *GetAcrV1NameTagsReferenceMetadataUnauthorized {
	return &GetAcrV1NameTagsReferenceMetadataUnauthorized{}
}

/*GetAcrV1NameTagsReferenceMetadataUnauthorized handles this case with default header values.

Unauthorized access
*/
type GetAcrV1NameTagsReferenceMetadataUnauthorized struct {
	Payload *GetAcrV1NameTagsReferenceMetadataUnauthorizedBody
}

func (o *GetAcrV1NameTagsReferenceMetadataUnauthorized) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_tags/{reference}/_metadata][%d] getAcrV1NameTagsReferenceMetadataUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAcrV1NameTagsReferenceMetadataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameTagsReferenceMetadataUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameTagsReferenceMetadataNotFound creates a GetAcrV1NameTagsReferenceMetadataNotFound with default headers values
func NewGetAcrV1NameTagsReferenceMetadataNotFound() *GetAcrV1NameTagsReferenceMetadataNotFound {
	return &GetAcrV1NameTagsReferenceMetadataNotFound{}
}

/*GetAcrV1NameTagsReferenceMetadataNotFound handles this case with default header values.

The repository or tag is unknown to the registry.
*/
type GetAcrV1NameTagsReferenceMetadataNotFound struct {
	Payload *GetAcrV1NameTagsReferenceMetadataNotFoundBody
}

func (o *GetAcrV1NameTagsReferenceMetadataNotFound) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_tags/{reference}/_metadata][%d] getAcrV1NameTagsReferenceMetadataNotFound  %+v", 404, o.Payload)
}

func (o *GetAcrV1NameTagsReferenceMetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameTagsReferenceMetadataNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetAcrV1NameTagsReferenceMetadataBadRequestBody get acr v1 name tags reference metadata bad request body
swagger:model GetAcrV1NameTagsReferenceMetadataBadRequestBody
*/
type GetAcrV1NameTagsReferenceMetadataBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name tags reference metadata bad request body
func (o *GetAcrV1NameTagsReferenceMetadataBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameTagsReferenceMetadataBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameTagsReferenceMetadataBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameTagsReferenceMetadataBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameTagsReferenceMetadataBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameTagsReferenceMetadataBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameTagsReferenceMetadataNotFoundBody get acr v1 name tags reference metadata not found body
swagger:model GetAcrV1NameTagsReferenceMetadataNotFoundBody
*/
type GetAcrV1NameTagsReferenceMetadataNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name tags reference metadata not found body
func (o *GetAcrV1NameTagsReferenceMetadataNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameTagsReferenceMetadataNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameTagsReferenceMetadataNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameTagsReferenceMetadataNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameTagsReferenceMetadataNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameTagsReferenceMetadataNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameTagsReferenceMetadataOKBody get acr v1 name tags reference metadata o k body
swagger:model GetAcrV1NameTagsReferenceMetadataOKBody
*/
type GetAcrV1NameTagsReferenceMetadataOKBody struct {

	// data
	Data *models.TagMetadataList `json:"data,omitempty"`
}

// Validate validates this get acr v1 name tags reference metadata o k body
func (o *GetAcrV1NameTagsReferenceMetadataOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameTagsReferenceMetadataOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameTagsReferenceMetadataOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameTagsReferenceMetadataOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameTagsReferenceMetadataOKBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameTagsReferenceMetadataOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameTagsReferenceMetadataUnauthorizedBody get acr v1 name tags reference metadata unauthorized body
swagger:model GetAcrV1NameTagsReferenceMetadataUnauthorizedBody
*/
type GetAcrV1NameTagsReferenceMetadataUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name tags reference metadata unauthorized body
func (o *GetAcrV1NameTagsReferenceMetadataUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameTagsReferenceMetadataUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameTagsReferenceMetadataUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameTagsReferenceMetadataUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameTagsReferenceMetadataUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameTagsReferenceMetadataUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
