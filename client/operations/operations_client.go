// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/sajayantony/acrctl/client"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAcrV1NameManifestsReferenceMetadataMetadata Delete a metadata of a manifest
*/
func (a *Client) DeleteAcrV1NameManifestsReferenceMetadataMetadata(params *DeleteAcrV1NameManifestsReferenceMetadataMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAcrV1NameManifestsReferenceMetadataMetadataAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAcrV1NameManifestsReferenceMetadataMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAcrV1NameManifestsReferenceMetadataMetadata",
		Method:             "DELETE",
		PathPattern:        "/acr/v1/{name}/_manifests/{reference}/_metadata/{metadata}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAcrV1NameManifestsReferenceMetadataMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAcrV1NameManifestsReferenceMetadataMetadataAccepted), nil

}

/*
DeleteAcrV1NameMetadataMetadata Delete a metadata of a repository
*/
func (a *Client) DeleteAcrV1NameMetadataMetadata(params *DeleteAcrV1NameMetadataMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAcrV1NameMetadataMetadataAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAcrV1NameMetadataMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAcrV1NameMetadataMetadata",
		Method:             "DELETE",
		PathPattern:        "/acr/v1/{name}/_metadata/{metadata}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAcrV1NameMetadataMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAcrV1NameMetadataMetadataAccepted), nil

}

/*
DeleteAcrV1NameTagsReference Delete a tag
*/
func (a *Client) DeleteAcrV1NameTagsReference(params *DeleteAcrV1NameTagsReferenceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAcrV1NameTagsReferenceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAcrV1NameTagsReferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAcrV1NameTagsReference",
		Method:             "DELETE",
		PathPattern:        "/acr/v1/{name}/_tags/{reference}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAcrV1NameTagsReferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAcrV1NameTagsReferenceAccepted), nil

}

/*
DeleteAcrV1NameTagsReferenceMetadataMetadata Delete a metadata of a tag
*/
func (a *Client) DeleteAcrV1NameTagsReferenceMetadataMetadata(params *DeleteAcrV1NameTagsReferenceMetadataMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAcrV1NameTagsReferenceMetadataMetadataAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAcrV1NameTagsReferenceMetadataMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAcrV1NameTagsReferenceMetadataMetadata",
		Method:             "DELETE",
		PathPattern:        "/acr/v1/{name}/_tags/{reference}/_metadata/{metadata}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAcrV1NameTagsReferenceMetadataMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAcrV1NameTagsReferenceMetadataMetadataAccepted), nil

}

/*
GetAcrV1Name Get respository attributes
*/
func (a *Client) GetAcrV1Name(params *GetAcrV1NameParams, authInfo runtime.ClientAuthInfoWriter) (*GetAcrV1NameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAcrV1NameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAcrV1Name",
		Method:             "GET",
		PathPattern:        "/acr/v1/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAcrV1NameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAcrV1NameOK), nil

}

/*
GetAcrV1NameManifests List manifets of a repository
*/
func (a *Client) GetAcrV1NameManifests(params *GetAcrV1NameManifestsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAcrV1NameManifestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAcrV1NameManifestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAcrV1NameManifests",
		Method:             "GET",
		PathPattern:        "/acr/v1/{name}/_manifests",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAcrV1NameManifestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAcrV1NameManifestsOK), nil

}

/*
GetAcrV1NameManifestsReference Get manifest attributes
*/
func (a *Client) GetAcrV1NameManifestsReference(params *GetAcrV1NameManifestsReferenceParams, authInfo runtime.ClientAuthInfoWriter) (*GetAcrV1NameManifestsReferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAcrV1NameManifestsReferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAcrV1NameManifestsReference",
		Method:             "GET",
		PathPattern:        "/acr/v1/{name}/_manifests/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAcrV1NameManifestsReferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAcrV1NameManifestsReferenceOK), nil

}

/*
GetAcrV1NameManifestsReferenceMetadata List manifest metadata
*/
func (a *Client) GetAcrV1NameManifestsReferenceMetadata(params *GetAcrV1NameManifestsReferenceMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetAcrV1NameManifestsReferenceMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAcrV1NameManifestsReferenceMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAcrV1NameManifestsReferenceMetadata",
		Method:             "GET",
		PathPattern:        "/acr/v1/{name}/_manifests/{reference}/_metadata",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAcrV1NameManifestsReferenceMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAcrV1NameManifestsReferenceMetadataOK), nil

}

/*
GetAcrV1NameManifestsReferenceMetadataMetadata Get metadata value
*/
func (a *Client) GetAcrV1NameManifestsReferenceMetadataMetadata(params *GetAcrV1NameManifestsReferenceMetadataMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetAcrV1NameManifestsReferenceMetadataMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAcrV1NameManifestsReferenceMetadataMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAcrV1NameManifestsReferenceMetadataMetadata",
		Method:             "GET",
		PathPattern:        "/acr/v1/{name}/_manifests/{reference}/_metadata/{metadata}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAcrV1NameManifestsReferenceMetadataMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAcrV1NameManifestsReferenceMetadataMetadataOK), nil

}

/*
GetAcrV1NameMetadata List respository metadata
*/
func (a *Client) GetAcrV1NameMetadata(params *GetAcrV1NameMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetAcrV1NameMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAcrV1NameMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAcrV1NameMetadata",
		Method:             "GET",
		PathPattern:        "/acr/v1/{name}/_metadata",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAcrV1NameMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAcrV1NameMetadataOK), nil

}

/*
GetAcrV1NameMetadataMetadata Get metadata value
*/
func (a *Client) GetAcrV1NameMetadataMetadata(params *GetAcrV1NameMetadataMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetAcrV1NameMetadataMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAcrV1NameMetadataMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAcrV1NameMetadataMetadata",
		Method:             "GET",
		PathPattern:        "/acr/v1/{name}/_metadata/{metadata}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAcrV1NameMetadataMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAcrV1NameMetadataMetadataOK), nil

}

/*
GetAcrV1NameTags List tags of a repository
*/
func (a *Client) GetAcrV1NameTags(params *GetAcrV1NameTagsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAcrV1NameTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAcrV1NameTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAcrV1NameTags",
		Method:             "GET",
		PathPattern:        "/acr/v1/{name}/_tags",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAcrV1NameTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAcrV1NameTagsOK), nil

}

/*
GetAcrV1NameTagsReference Get tag attributes
*/
func (a *Client) GetAcrV1NameTagsReference(params *GetAcrV1NameTagsReferenceParams, authInfo runtime.ClientAuthInfoWriter) (*GetAcrV1NameTagsReferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAcrV1NameTagsReferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAcrV1NameTagsReference",
		Method:             "GET",
		PathPattern:        "/acr/v1/{name}/_tags/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAcrV1NameTagsReferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAcrV1NameTagsReferenceOK), nil

}

/*
GetAcrV1NameTagsReferenceMetadata List tag metadata
*/
func (a *Client) GetAcrV1NameTagsReferenceMetadata(params *GetAcrV1NameTagsReferenceMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetAcrV1NameTagsReferenceMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAcrV1NameTagsReferenceMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAcrV1NameTagsReferenceMetadata",
		Method:             "GET",
		PathPattern:        "/acr/v1/{name}/_tags/{reference}/_metadata",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAcrV1NameTagsReferenceMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAcrV1NameTagsReferenceMetadataOK), nil

}

/*
GetAcrV1NameTagsReferenceMetadataMetadata Get metadata value
*/
func (a *Client) GetAcrV1NameTagsReferenceMetadataMetadata(params *GetAcrV1NameTagsReferenceMetadataMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetAcrV1NameTagsReferenceMetadataMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAcrV1NameTagsReferenceMetadataMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAcrV1NameTagsReferenceMetadataMetadata",
		Method:             "GET",
		PathPattern:        "/acr/v1/{name}/_tags/{reference}/_metadata/{metadata}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAcrV1NameTagsReferenceMetadataMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAcrV1NameTagsReferenceMetadataMetadataOK), nil

}

/*
PatchAcrV1Name Update attributes of a repository
*/
func (a *Client) PatchAcrV1Name(params *PatchAcrV1NameParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAcrV1NameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAcrV1NameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAcrV1Name",
		Method:             "PATCH",
		PathPattern:        "/acr/v1/{name}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAcrV1NameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAcrV1NameNoContent), nil

}

/*
PatchAcrV1NameManifestsReference Update attributes of a manifest
*/
func (a *Client) PatchAcrV1NameManifestsReference(params *PatchAcrV1NameManifestsReferenceParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAcrV1NameManifestsReferenceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAcrV1NameManifestsReferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAcrV1NameManifestsReference",
		Method:             "PATCH",
		PathPattern:        "/acr/v1/{name}/_manifests/{reference}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAcrV1NameManifestsReferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAcrV1NameManifestsReferenceNoContent), nil

}

/*
PatchAcrV1NameTagsReference Update attributes of a tag
*/
func (a *Client) PatchAcrV1NameTagsReference(params *PatchAcrV1NameTagsReferenceParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAcrV1NameTagsReferenceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAcrV1NameTagsReferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAcrV1NameTagsReference",
		Method:             "PATCH",
		PathPattern:        "/acr/v1/{name}/_tags/{reference}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAcrV1NameTagsReferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAcrV1NameTagsReferenceNoContent), nil

}

/*
PutAcrV1NameManifestsReferenceMetadataMetadata Add or update a metadata of a manifest
*/
func (a *Client) PutAcrV1NameManifestsReferenceMetadataMetadata(params *PutAcrV1NameManifestsReferenceMetadataMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*PutAcrV1NameManifestsReferenceMetadataMetadataCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAcrV1NameManifestsReferenceMetadataMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAcrV1NameManifestsReferenceMetadataMetadata",
		Method:             "PUT",
		PathPattern:        "/acr/v1/{name}/_manifests/{reference}/_metadata/{metadata}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAcrV1NameManifestsReferenceMetadataMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAcrV1NameManifestsReferenceMetadataMetadataCreated), nil

}

/*
PutAcrV1NameMetadataMetadata Add or update a metadata of a repository
*/
func (a *Client) PutAcrV1NameMetadataMetadata(params *PutAcrV1NameMetadataMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*PutAcrV1NameMetadataMetadataCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAcrV1NameMetadataMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAcrV1NameMetadataMetadata",
		Method:             "PUT",
		PathPattern:        "/acr/v1/{name}/_metadata/{metadata}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAcrV1NameMetadataMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAcrV1NameMetadataMetadataCreated), nil

}

/*
PutAcrV1NameTagsReferenceMetadataMetadata Add or update a metadata of a tag
*/
func (a *Client) PutAcrV1NameTagsReferenceMetadataMetadata(params *PutAcrV1NameTagsReferenceMetadataMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*PutAcrV1NameTagsReferenceMetadataMetadataCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAcrV1NameTagsReferenceMetadataMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAcrV1NameTagsReferenceMetadataMetadata",
		Method:             "PUT",
		PathPattern:        "/acr/v1/{name}/_tags/{reference}/_metadata/{metadata}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAcrV1NameTagsReferenceMetadataMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAcrV1NameTagsReferenceMetadataMetadataCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
