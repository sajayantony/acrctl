// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// GetAcrV1NameManifestsReferenceReader is a Reader for the GetAcrV1NameManifestsReference structure.
type GetAcrV1NameManifestsReferenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAcrV1NameManifestsReferenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAcrV1NameManifestsReferenceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAcrV1NameManifestsReferenceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetAcrV1NameManifestsReferenceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetAcrV1NameManifestsReferenceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAcrV1NameManifestsReferenceOK creates a GetAcrV1NameManifestsReferenceOK with default headers values
func NewGetAcrV1NameManifestsReferenceOK() *GetAcrV1NameManifestsReferenceOK {
	return &GetAcrV1NameManifestsReferenceOK{}
}

/*GetAcrV1NameManifestsReferenceOK handles this case with default header values.

Returns a list of attributes
*/
type GetAcrV1NameManifestsReferenceOK struct {
	Payload *GetAcrV1NameManifestsReferenceOKBody
}

func (o *GetAcrV1NameManifestsReferenceOK) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_manifests/{reference}][%d] getAcrV1NameManifestsReferenceOK  %+v", 200, o.Payload)
}

func (o *GetAcrV1NameManifestsReferenceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameManifestsReferenceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameManifestsReferenceBadRequest creates a GetAcrV1NameManifestsReferenceBadRequest with default headers values
func NewGetAcrV1NameManifestsReferenceBadRequest() *GetAcrV1NameManifestsReferenceBadRequest {
	return &GetAcrV1NameManifestsReferenceBadRequest{}
}

/*GetAcrV1NameManifestsReferenceBadRequest handles this case with default header values.

On failure
*/
type GetAcrV1NameManifestsReferenceBadRequest struct {
	Payload *GetAcrV1NameManifestsReferenceBadRequestBody
}

func (o *GetAcrV1NameManifestsReferenceBadRequest) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_manifests/{reference}][%d] getAcrV1NameManifestsReferenceBadRequest  %+v", 400, o.Payload)
}

func (o *GetAcrV1NameManifestsReferenceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameManifestsReferenceBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameManifestsReferenceUnauthorized creates a GetAcrV1NameManifestsReferenceUnauthorized with default headers values
func NewGetAcrV1NameManifestsReferenceUnauthorized() *GetAcrV1NameManifestsReferenceUnauthorized {
	return &GetAcrV1NameManifestsReferenceUnauthorized{}
}

/*GetAcrV1NameManifestsReferenceUnauthorized handles this case with default header values.

Unauthorized access
*/
type GetAcrV1NameManifestsReferenceUnauthorized struct {
	Payload *GetAcrV1NameManifestsReferenceUnauthorizedBody
}

func (o *GetAcrV1NameManifestsReferenceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_manifests/{reference}][%d] getAcrV1NameManifestsReferenceUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAcrV1NameManifestsReferenceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameManifestsReferenceUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameManifestsReferenceNotFound creates a GetAcrV1NameManifestsReferenceNotFound with default headers values
func NewGetAcrV1NameManifestsReferenceNotFound() *GetAcrV1NameManifestsReferenceNotFound {
	return &GetAcrV1NameManifestsReferenceNotFound{}
}

/*GetAcrV1NameManifestsReferenceNotFound handles this case with default header values.

The repository or manifest is unknown to the registry.
*/
type GetAcrV1NameManifestsReferenceNotFound struct {
	Payload *GetAcrV1NameManifestsReferenceNotFoundBody
}

func (o *GetAcrV1NameManifestsReferenceNotFound) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}/_manifests/{reference}][%d] getAcrV1NameManifestsReferenceNotFound  %+v", 404, o.Payload)
}

func (o *GetAcrV1NameManifestsReferenceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameManifestsReferenceNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetAcrV1NameManifestsReferenceBadRequestBody get acr v1 name manifests reference bad request body
swagger:model GetAcrV1NameManifestsReferenceBadRequestBody
*/
type GetAcrV1NameManifestsReferenceBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name manifests reference bad request body
func (o *GetAcrV1NameManifestsReferenceBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameManifestsReferenceBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameManifestsReferenceBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameManifestsReferenceBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameManifestsReferenceNotFoundBody get acr v1 name manifests reference not found body
swagger:model GetAcrV1NameManifestsReferenceNotFoundBody
*/
type GetAcrV1NameManifestsReferenceNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name manifests reference not found body
func (o *GetAcrV1NameManifestsReferenceNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameManifestsReferenceNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameManifestsReferenceNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameManifestsReferenceNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameManifestsReferenceOKBody get acr v1 name manifests reference o k body
swagger:model GetAcrV1NameManifestsReferenceOKBody
*/
type GetAcrV1NameManifestsReferenceOKBody struct {

	// data
	Data *models.ManifestAttributeList `json:"data,omitempty"`
}

// Validate validates this get acr v1 name manifests reference o k body
func (o *GetAcrV1NameManifestsReferenceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameManifestsReferenceOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameManifestsReferenceOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceOKBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameManifestsReferenceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameManifestsReferenceUnauthorizedBody get acr v1 name manifests reference unauthorized body
swagger:model GetAcrV1NameManifestsReferenceUnauthorizedBody
*/
type GetAcrV1NameManifestsReferenceUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name manifests reference unauthorized body
func (o *GetAcrV1NameManifestsReferenceUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameManifestsReferenceUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameManifestsReferenceUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameManifestsReferenceUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameManifestsReferenceUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
