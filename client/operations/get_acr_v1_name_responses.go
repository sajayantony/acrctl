// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// GetAcrV1NameReader is a Reader for the GetAcrV1Name structure.
type GetAcrV1NameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAcrV1NameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAcrV1NameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAcrV1NameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetAcrV1NameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetAcrV1NameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAcrV1NameOK creates a GetAcrV1NameOK with default headers values
func NewGetAcrV1NameOK() *GetAcrV1NameOK {
	return &GetAcrV1NameOK{}
}

/*GetAcrV1NameOK handles this case with default header values.

Returns a list of attributes
*/
type GetAcrV1NameOK struct {
	Payload *GetAcrV1NameOKBody
}

func (o *GetAcrV1NameOK) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}][%d] getAcrV1NameOK  %+v", 200, o.Payload)
}

func (o *GetAcrV1NameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameBadRequest creates a GetAcrV1NameBadRequest with default headers values
func NewGetAcrV1NameBadRequest() *GetAcrV1NameBadRequest {
	return &GetAcrV1NameBadRequest{}
}

/*GetAcrV1NameBadRequest handles this case with default header values.

On failure
*/
type GetAcrV1NameBadRequest struct {
	Payload *GetAcrV1NameBadRequestBody
}

func (o *GetAcrV1NameBadRequest) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}][%d] getAcrV1NameBadRequest  %+v", 400, o.Payload)
}

func (o *GetAcrV1NameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameUnauthorized creates a GetAcrV1NameUnauthorized with default headers values
func NewGetAcrV1NameUnauthorized() *GetAcrV1NameUnauthorized {
	return &GetAcrV1NameUnauthorized{}
}

/*GetAcrV1NameUnauthorized handles this case with default header values.

Unauthorized access
*/
type GetAcrV1NameUnauthorized struct {
	Payload *GetAcrV1NameUnauthorizedBody
}

func (o *GetAcrV1NameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}][%d] getAcrV1NameUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAcrV1NameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAcrV1NameNotFound creates a GetAcrV1NameNotFound with default headers values
func NewGetAcrV1NameNotFound() *GetAcrV1NameNotFound {
	return &GetAcrV1NameNotFound{}
}

/*GetAcrV1NameNotFound handles this case with default header values.

The repository is unknown to the registry.
*/
type GetAcrV1NameNotFound struct {
	Payload *GetAcrV1NameNotFoundBody
}

func (o *GetAcrV1NameNotFound) Error() string {
	return fmt.Sprintf("[GET /acr/v1/{name}][%d] getAcrV1NameNotFound  %+v", 404, o.Payload)
}

func (o *GetAcrV1NameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAcrV1NameNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetAcrV1NameBadRequestBody get acr v1 name bad request body
swagger:model GetAcrV1NameBadRequestBody
*/
type GetAcrV1NameBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name bad request body
func (o *GetAcrV1NameBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameNotFoundBody get acr v1 name not found body
swagger:model GetAcrV1NameNotFoundBody
*/
type GetAcrV1NameNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name not found body
func (o *GetAcrV1NameNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameOKBody get acr v1 name o k body
swagger:model GetAcrV1NameOKBody
*/
type GetAcrV1NameOKBody struct {

	// data
	Data *models.RepositoryAttributes `json:"data,omitempty"`
}

// Validate validates this get acr v1 name o k body
func (o *GetAcrV1NameOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameOKBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAcrV1NameUnauthorizedBody get acr v1 name unauthorized body
swagger:model GetAcrV1NameUnauthorizedBody
*/
type GetAcrV1NameUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get acr v1 name unauthorized body
func (o *GetAcrV1NameUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAcrV1NameUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAcrV1NameUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAcrV1NameUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAcrV1NameUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetAcrV1NameUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
