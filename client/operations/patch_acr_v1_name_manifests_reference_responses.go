// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// PatchAcrV1NameManifestsReferenceReader is a Reader for the PatchAcrV1NameManifestsReference structure.
type PatchAcrV1NameManifestsReferenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAcrV1NameManifestsReferenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPatchAcrV1NameManifestsReferenceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchAcrV1NameManifestsReferenceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPatchAcrV1NameManifestsReferenceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchAcrV1NameManifestsReferenceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchAcrV1NameManifestsReferenceNoContent creates a PatchAcrV1NameManifestsReferenceNoContent with default headers values
func NewPatchAcrV1NameManifestsReferenceNoContent() *PatchAcrV1NameManifestsReferenceNoContent {
	return &PatchAcrV1NameManifestsReferenceNoContent{}
}

/*PatchAcrV1NameManifestsReferenceNoContent handles this case with default header values.

The attributes are updated
*/
type PatchAcrV1NameManifestsReferenceNoContent struct {
}

func (o *PatchAcrV1NameManifestsReferenceNoContent) Error() string {
	return fmt.Sprintf("[PATCH /acr/v1/{name}/_manifests/{reference}][%d] patchAcrV1NameManifestsReferenceNoContent ", 204)
}

func (o *PatchAcrV1NameManifestsReferenceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchAcrV1NameManifestsReferenceBadRequest creates a PatchAcrV1NameManifestsReferenceBadRequest with default headers values
func NewPatchAcrV1NameManifestsReferenceBadRequest() *PatchAcrV1NameManifestsReferenceBadRequest {
	return &PatchAcrV1NameManifestsReferenceBadRequest{}
}

/*PatchAcrV1NameManifestsReferenceBadRequest handles this case with default header values.

On failure
*/
type PatchAcrV1NameManifestsReferenceBadRequest struct {
	Payload *PatchAcrV1NameManifestsReferenceBadRequestBody
}

func (o *PatchAcrV1NameManifestsReferenceBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /acr/v1/{name}/_manifests/{reference}][%d] patchAcrV1NameManifestsReferenceBadRequest  %+v", 400, o.Payload)
}

func (o *PatchAcrV1NameManifestsReferenceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAcrV1NameManifestsReferenceBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAcrV1NameManifestsReferenceUnauthorized creates a PatchAcrV1NameManifestsReferenceUnauthorized with default headers values
func NewPatchAcrV1NameManifestsReferenceUnauthorized() *PatchAcrV1NameManifestsReferenceUnauthorized {
	return &PatchAcrV1NameManifestsReferenceUnauthorized{}
}

/*PatchAcrV1NameManifestsReferenceUnauthorized handles this case with default header values.

Unauthorized access
*/
type PatchAcrV1NameManifestsReferenceUnauthorized struct {
	Payload *PatchAcrV1NameManifestsReferenceUnauthorizedBody
}

func (o *PatchAcrV1NameManifestsReferenceUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /acr/v1/{name}/_manifests/{reference}][%d] patchAcrV1NameManifestsReferenceUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchAcrV1NameManifestsReferenceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAcrV1NameManifestsReferenceUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAcrV1NameManifestsReferenceNotFound creates a PatchAcrV1NameManifestsReferenceNotFound with default headers values
func NewPatchAcrV1NameManifestsReferenceNotFound() *PatchAcrV1NameManifestsReferenceNotFound {
	return &PatchAcrV1NameManifestsReferenceNotFound{}
}

/*PatchAcrV1NameManifestsReferenceNotFound handles this case with default header values.

The repository or manifest is unknown
*/
type PatchAcrV1NameManifestsReferenceNotFound struct {
	Payload *PatchAcrV1NameManifestsReferenceNotFoundBody
}

func (o *PatchAcrV1NameManifestsReferenceNotFound) Error() string {
	return fmt.Sprintf("[PATCH /acr/v1/{name}/_manifests/{reference}][%d] patchAcrV1NameManifestsReferenceNotFound  %+v", 404, o.Payload)
}

func (o *PatchAcrV1NameManifestsReferenceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchAcrV1NameManifestsReferenceNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchAcrV1NameManifestsReferenceBadRequestBody patch acr v1 name manifests reference bad request body
swagger:model PatchAcrV1NameManifestsReferenceBadRequestBody
*/
type PatchAcrV1NameManifestsReferenceBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this patch acr v1 name manifests reference bad request body
func (o *PatchAcrV1NameManifestsReferenceBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAcrV1NameManifestsReferenceBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchAcrV1NameManifestsReferenceBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAcrV1NameManifestsReferenceBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAcrV1NameManifestsReferenceBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PatchAcrV1NameManifestsReferenceBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAcrV1NameManifestsReferenceNotFoundBody patch acr v1 name manifests reference not found body
swagger:model PatchAcrV1NameManifestsReferenceNotFoundBody
*/
type PatchAcrV1NameManifestsReferenceNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this patch acr v1 name manifests reference not found body
func (o *PatchAcrV1NameManifestsReferenceNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAcrV1NameManifestsReferenceNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchAcrV1NameManifestsReferenceNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAcrV1NameManifestsReferenceNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAcrV1NameManifestsReferenceNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PatchAcrV1NameManifestsReferenceNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchAcrV1NameManifestsReferenceUnauthorizedBody patch acr v1 name manifests reference unauthorized body
swagger:model PatchAcrV1NameManifestsReferenceUnauthorizedBody
*/
type PatchAcrV1NameManifestsReferenceUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this patch acr v1 name manifests reference unauthorized body
func (o *PatchAcrV1NameManifestsReferenceUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchAcrV1NameManifestsReferenceUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchAcrV1NameManifestsReferenceUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchAcrV1NameManifestsReferenceUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchAcrV1NameManifestsReferenceUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PatchAcrV1NameManifestsReferenceUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
