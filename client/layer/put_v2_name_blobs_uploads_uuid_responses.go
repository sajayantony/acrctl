// Code generated by go-swagger; DO NOT EDIT.

package layer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// PutV2NameBlobsUploadsUUIDReader is a Reader for the PutV2NameBlobsUploadsUUID structure.
type PutV2NameBlobsUploadsUUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutV2NameBlobsUploadsUUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPutV2NameBlobsUploadsUUIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutV2NameBlobsUploadsUUIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutV2NameBlobsUploadsUUIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutV2NameBlobsUploadsUUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutV2NameBlobsUploadsUUIDNoContent creates a PutV2NameBlobsUploadsUUIDNoContent with default headers values
func NewPutV2NameBlobsUploadsUUIDNoContent() *PutV2NameBlobsUploadsUUIDNoContent {
	return &PutV2NameBlobsUploadsUUIDNoContent{}
}

/*PutV2NameBlobsUploadsUUIDNoContent handles this case with default header values.

The upload has been completed and accepted by the registry.
*/
type PutV2NameBlobsUploadsUUIDNoContent struct {
}

func (o *PutV2NameBlobsUploadsUUIDNoContent) Error() string {
	return fmt.Sprintf("[PUT /v2/{name}/blobs/uploads/{uuid}][%d] putV2NameBlobsUploadsUuidNoContent ", 204)
}

func (o *PutV2NameBlobsUploadsUUIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutV2NameBlobsUploadsUUIDBadRequest creates a PutV2NameBlobsUploadsUUIDBadRequest with default headers values
func NewPutV2NameBlobsUploadsUUIDBadRequest() *PutV2NameBlobsUploadsUUIDBadRequest {
	return &PutV2NameBlobsUploadsUUIDBadRequest{}
}

/*PutV2NameBlobsUploadsUUIDBadRequest handles this case with default header values.

On failure
*/
type PutV2NameBlobsUploadsUUIDBadRequest struct {
	Payload *PutV2NameBlobsUploadsUUIDBadRequestBody
}

func (o *PutV2NameBlobsUploadsUUIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v2/{name}/blobs/uploads/{uuid}][%d] putV2NameBlobsUploadsUuidBadRequest  %+v", 400, o.Payload)
}

func (o *PutV2NameBlobsUploadsUUIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutV2NameBlobsUploadsUUIDBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutV2NameBlobsUploadsUUIDUnauthorized creates a PutV2NameBlobsUploadsUUIDUnauthorized with default headers values
func NewPutV2NameBlobsUploadsUUIDUnauthorized() *PutV2NameBlobsUploadsUUIDUnauthorized {
	return &PutV2NameBlobsUploadsUUIDUnauthorized{}
}

/*PutV2NameBlobsUploadsUUIDUnauthorized handles this case with default header values.

Unauthorized access
*/
type PutV2NameBlobsUploadsUUIDUnauthorized struct {
	Payload *PutV2NameBlobsUploadsUUIDUnauthorizedBody
}

func (o *PutV2NameBlobsUploadsUUIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v2/{name}/blobs/uploads/{uuid}][%d] putV2NameBlobsUploadsUuidUnauthorized  %+v", 401, o.Payload)
}

func (o *PutV2NameBlobsUploadsUUIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutV2NameBlobsUploadsUUIDUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutV2NameBlobsUploadsUUIDNotFound creates a PutV2NameBlobsUploadsUUIDNotFound with default headers values
func NewPutV2NameBlobsUploadsUUIDNotFound() *PutV2NameBlobsUploadsUUIDNotFound {
	return &PutV2NameBlobsUploadsUUIDNotFound{}
}

/*PutV2NameBlobsUploadsUUIDNotFound handles this case with default header values.

The upload is unknown to the registry. The upload must be restarted.
*/
type PutV2NameBlobsUploadsUUIDNotFound struct {
	Payload *PutV2NameBlobsUploadsUUIDNotFoundBody
}

func (o *PutV2NameBlobsUploadsUUIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /v2/{name}/blobs/uploads/{uuid}][%d] putV2NameBlobsUploadsUuidNotFound  %+v", 404, o.Payload)
}

func (o *PutV2NameBlobsUploadsUUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutV2NameBlobsUploadsUUIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PutV2NameBlobsUploadsUUIDBadRequestBody put v2 name blobs uploads UUID bad request body
swagger:model PutV2NameBlobsUploadsUUIDBadRequestBody
*/
type PutV2NameBlobsUploadsUUIDBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this put v2 name blobs uploads UUID bad request body
func (o *PutV2NameBlobsUploadsUUIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutV2NameBlobsUploadsUUIDBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putV2NameBlobsUploadsUuidBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutV2NameBlobsUploadsUUIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutV2NameBlobsUploadsUUIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutV2NameBlobsUploadsUUIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutV2NameBlobsUploadsUUIDNotFoundBody put v2 name blobs uploads UUID not found body
swagger:model PutV2NameBlobsUploadsUUIDNotFoundBody
*/
type PutV2NameBlobsUploadsUUIDNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this put v2 name blobs uploads UUID not found body
func (o *PutV2NameBlobsUploadsUUIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutV2NameBlobsUploadsUUIDNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putV2NameBlobsUploadsUuidNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutV2NameBlobsUploadsUUIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutV2NameBlobsUploadsUUIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutV2NameBlobsUploadsUUIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutV2NameBlobsUploadsUUIDUnauthorizedBody put v2 name blobs uploads UUID unauthorized body
swagger:model PutV2NameBlobsUploadsUUIDUnauthorizedBody
*/
type PutV2NameBlobsUploadsUUIDUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this put v2 name blobs uploads UUID unauthorized body
func (o *PutV2NameBlobsUploadsUUIDUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutV2NameBlobsUploadsUUIDUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putV2NameBlobsUploadsUuidUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutV2NameBlobsUploadsUUIDUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutV2NameBlobsUploadsUUIDUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PutV2NameBlobsUploadsUUIDUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
