// Code generated by go-swagger; DO NOT EDIT.

package layer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// PostV2NameBlobsUploadsReader is a Reader for the PostV2NameBlobsUploads structure.
type PostV2NameBlobsUploadsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV2NameBlobsUploadsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostV2NameBlobsUploadsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewPostV2NameBlobsUploadsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostV2NameBlobsUploadsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostV2NameBlobsUploadsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostV2NameBlobsUploadsCreated creates a PostV2NameBlobsUploadsCreated with default headers values
func NewPostV2NameBlobsUploadsCreated() *PostV2NameBlobsUploadsCreated {
	return &PostV2NameBlobsUploadsCreated{}
}

/*PostV2NameBlobsUploadsCreated handles this case with default header values.

The blob has been created in the registry and is available at the provided location.
*/
type PostV2NameBlobsUploadsCreated struct {
}

func (o *PostV2NameBlobsUploadsCreated) Error() string {
	return fmt.Sprintf("[POST /v2/{name}/blobs/uploads][%d] postV2NameBlobsUploadsCreated ", 201)
}

func (o *PostV2NameBlobsUploadsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostV2NameBlobsUploadsAccepted creates a PostV2NameBlobsUploadsAccepted with default headers values
func NewPostV2NameBlobsUploadsAccepted() *PostV2NameBlobsUploadsAccepted {
	return &PostV2NameBlobsUploadsAccepted{}
}

/*PostV2NameBlobsUploadsAccepted handles this case with default header values.

The upload has been created. The Location header must be used to complete the upload. The response should be identical to a GET request on the contents of the returned Location header.
*/
type PostV2NameBlobsUploadsAccepted struct {
}

func (o *PostV2NameBlobsUploadsAccepted) Error() string {
	return fmt.Sprintf("[POST /v2/{name}/blobs/uploads][%d] postV2NameBlobsUploadsAccepted ", 202)
}

func (o *PostV2NameBlobsUploadsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostV2NameBlobsUploadsBadRequest creates a PostV2NameBlobsUploadsBadRequest with default headers values
func NewPostV2NameBlobsUploadsBadRequest() *PostV2NameBlobsUploadsBadRequest {
	return &PostV2NameBlobsUploadsBadRequest{}
}

/*PostV2NameBlobsUploadsBadRequest handles this case with default header values.

On failure
*/
type PostV2NameBlobsUploadsBadRequest struct {
	Payload *PostV2NameBlobsUploadsBadRequestBody
}

func (o *PostV2NameBlobsUploadsBadRequest) Error() string {
	return fmt.Sprintf("[POST /v2/{name}/blobs/uploads][%d] postV2NameBlobsUploadsBadRequest  %+v", 400, o.Payload)
}

func (o *PostV2NameBlobsUploadsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV2NameBlobsUploadsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV2NameBlobsUploadsUnauthorized creates a PostV2NameBlobsUploadsUnauthorized with default headers values
func NewPostV2NameBlobsUploadsUnauthorized() *PostV2NameBlobsUploadsUnauthorized {
	return &PostV2NameBlobsUploadsUnauthorized{}
}

/*PostV2NameBlobsUploadsUnauthorized handles this case with default header values.

Unauthorized access
*/
type PostV2NameBlobsUploadsUnauthorized struct {
	Payload *PostV2NameBlobsUploadsUnauthorizedBody
}

func (o *PostV2NameBlobsUploadsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v2/{name}/blobs/uploads][%d] postV2NameBlobsUploadsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostV2NameBlobsUploadsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV2NameBlobsUploadsUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostV2NameBlobsUploadsBadRequestBody post v2 name blobs uploads bad request body
swagger:model PostV2NameBlobsUploadsBadRequestBody
*/
type PostV2NameBlobsUploadsBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this post v2 name blobs uploads bad request body
func (o *PostV2NameBlobsUploadsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV2NameBlobsUploadsBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV2NameBlobsUploadsBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostV2NameBlobsUploadsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV2NameBlobsUploadsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostV2NameBlobsUploadsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostV2NameBlobsUploadsUnauthorizedBody post v2 name blobs uploads unauthorized body
swagger:model PostV2NameBlobsUploadsUnauthorizedBody
*/
type PostV2NameBlobsUploadsUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this post v2 name blobs uploads unauthorized body
func (o *PostV2NameBlobsUploadsUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV2NameBlobsUploadsUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV2NameBlobsUploadsUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostV2NameBlobsUploadsUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV2NameBlobsUploadsUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PostV2NameBlobsUploadsUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
