// Code generated by go-swagger; DO NOT EDIT.

package layer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// GetV2NameBlobsUploadsUUIDReader is a Reader for the GetV2NameBlobsUploadsUUID structure.
type GetV2NameBlobsUploadsUUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV2NameBlobsUploadsUUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewGetV2NameBlobsUploadsUUIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetV2NameBlobsUploadsUUIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetV2NameBlobsUploadsUUIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetV2NameBlobsUploadsUUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetV2NameBlobsUploadsUUIDNoContent creates a GetV2NameBlobsUploadsUUIDNoContent with default headers values
func NewGetV2NameBlobsUploadsUUIDNoContent() *GetV2NameBlobsUploadsUUIDNoContent {
	return &GetV2NameBlobsUploadsUUIDNoContent{}
}

/*GetV2NameBlobsUploadsUUIDNoContent handles this case with default header values.

The upload is known and in progress. The last received offset is available in the Range header.
*/
type GetV2NameBlobsUploadsUUIDNoContent struct {
}

func (o *GetV2NameBlobsUploadsUUIDNoContent) Error() string {
	return fmt.Sprintf("[GET /v2/{name}/blobs/uploads/{uuid}][%d] getV2NameBlobsUploadsUuidNoContent ", 204)
}

func (o *GetV2NameBlobsUploadsUUIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetV2NameBlobsUploadsUUIDBadRequest creates a GetV2NameBlobsUploadsUUIDBadRequest with default headers values
func NewGetV2NameBlobsUploadsUUIDBadRequest() *GetV2NameBlobsUploadsUUIDBadRequest {
	return &GetV2NameBlobsUploadsUUIDBadRequest{}
}

/*GetV2NameBlobsUploadsUUIDBadRequest handles this case with default header values.

On failure
*/
type GetV2NameBlobsUploadsUUIDBadRequest struct {
	Payload *GetV2NameBlobsUploadsUUIDBadRequestBody
}

func (o *GetV2NameBlobsUploadsUUIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /v2/{name}/blobs/uploads/{uuid}][%d] getV2NameBlobsUploadsUuidBadRequest  %+v", 400, o.Payload)
}

func (o *GetV2NameBlobsUploadsUUIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV2NameBlobsUploadsUUIDBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV2NameBlobsUploadsUUIDUnauthorized creates a GetV2NameBlobsUploadsUUIDUnauthorized with default headers values
func NewGetV2NameBlobsUploadsUUIDUnauthorized() *GetV2NameBlobsUploadsUUIDUnauthorized {
	return &GetV2NameBlobsUploadsUUIDUnauthorized{}
}

/*GetV2NameBlobsUploadsUUIDUnauthorized handles this case with default header values.

Unauthorized access
*/
type GetV2NameBlobsUploadsUUIDUnauthorized struct {
	Payload *GetV2NameBlobsUploadsUUIDUnauthorizedBody
}

func (o *GetV2NameBlobsUploadsUUIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/{name}/blobs/uploads/{uuid}][%d] getV2NameBlobsUploadsUuidUnauthorized  %+v", 401, o.Payload)
}

func (o *GetV2NameBlobsUploadsUUIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV2NameBlobsUploadsUUIDUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV2NameBlobsUploadsUUIDNotFound creates a GetV2NameBlobsUploadsUUIDNotFound with default headers values
func NewGetV2NameBlobsUploadsUUIDNotFound() *GetV2NameBlobsUploadsUUIDNotFound {
	return &GetV2NameBlobsUploadsUUIDNotFound{}
}

/*GetV2NameBlobsUploadsUUIDNotFound handles this case with default header values.

The upload is unknown to the registry. The upload must be restarted.
*/
type GetV2NameBlobsUploadsUUIDNotFound struct {
	Payload *GetV2NameBlobsUploadsUUIDNotFoundBody
}

func (o *GetV2NameBlobsUploadsUUIDNotFound) Error() string {
	return fmt.Sprintf("[GET /v2/{name}/blobs/uploads/{uuid}][%d] getV2NameBlobsUploadsUuidNotFound  %+v", 404, o.Payload)
}

func (o *GetV2NameBlobsUploadsUUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV2NameBlobsUploadsUUIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetV2NameBlobsUploadsUUIDBadRequestBody get v2 name blobs uploads UUID bad request body
swagger:model GetV2NameBlobsUploadsUUIDBadRequestBody
*/
type GetV2NameBlobsUploadsUUIDBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get v2 name blobs uploads UUID bad request body
func (o *GetV2NameBlobsUploadsUUIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV2NameBlobsUploadsUUIDBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV2NameBlobsUploadsUuidBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV2NameBlobsUploadsUUIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV2NameBlobsUploadsUUIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetV2NameBlobsUploadsUUIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetV2NameBlobsUploadsUUIDNotFoundBody get v2 name blobs uploads UUID not found body
swagger:model GetV2NameBlobsUploadsUUIDNotFoundBody
*/
type GetV2NameBlobsUploadsUUIDNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get v2 name blobs uploads UUID not found body
func (o *GetV2NameBlobsUploadsUUIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV2NameBlobsUploadsUUIDNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV2NameBlobsUploadsUuidNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV2NameBlobsUploadsUUIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV2NameBlobsUploadsUUIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetV2NameBlobsUploadsUUIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetV2NameBlobsUploadsUUIDUnauthorizedBody get v2 name blobs uploads UUID unauthorized body
swagger:model GetV2NameBlobsUploadsUUIDUnauthorizedBody
*/
type GetV2NameBlobsUploadsUUIDUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get v2 name blobs uploads UUID unauthorized body
func (o *GetV2NameBlobsUploadsUUIDUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV2NameBlobsUploadsUUIDUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV2NameBlobsUploadsUuidUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV2NameBlobsUploadsUUIDUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV2NameBlobsUploadsUUIDUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetV2NameBlobsUploadsUUIDUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
