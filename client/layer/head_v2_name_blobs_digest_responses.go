// Code generated by go-swagger; DO NOT EDIT.

package layer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// HeadV2NameBlobsDigestReader is a Reader for the HeadV2NameBlobsDigest structure.
type HeadV2NameBlobsDigestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HeadV2NameBlobsDigestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewHeadV2NameBlobsDigestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewHeadV2NameBlobsDigestPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 307:
		result := NewHeadV2NameBlobsDigestTemporaryRedirect()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 400:
		result := NewHeadV2NameBlobsDigestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewHeadV2NameBlobsDigestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewHeadV2NameBlobsDigestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 416:
		result := NewHeadV2NameBlobsDigestRequestRangeNotSatisfiable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewHeadV2NameBlobsDigestOK creates a HeadV2NameBlobsDigestOK with default headers values
func NewHeadV2NameBlobsDigestOK() *HeadV2NameBlobsDigestOK {
	return &HeadV2NameBlobsDigestOK{}
}

/*HeadV2NameBlobsDigestOK handles this case with default header values.

The blob identified by digest is available. The blob content will be present in the body of the response.
*/
type HeadV2NameBlobsDigestOK struct {
}

func (o *HeadV2NameBlobsDigestOK) Error() string {
	return fmt.Sprintf("[HEAD /v2/{name}/blobs/{digest}][%d] headV2NameBlobsDigestOK ", 200)
}

func (o *HeadV2NameBlobsDigestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHeadV2NameBlobsDigestPartialContent creates a HeadV2NameBlobsDigestPartialContent with default headers values
func NewHeadV2NameBlobsDigestPartialContent() *HeadV2NameBlobsDigestPartialContent {
	return &HeadV2NameBlobsDigestPartialContent{}
}

/*HeadV2NameBlobsDigestPartialContent handles this case with default header values.

The blob identified by digest is available. The specified chunk of blob content will be present in the body of the request.
*/
type HeadV2NameBlobsDigestPartialContent struct {
}

func (o *HeadV2NameBlobsDigestPartialContent) Error() string {
	return fmt.Sprintf("[HEAD /v2/{name}/blobs/{digest}][%d] headV2NameBlobsDigestPartialContent ", 206)
}

func (o *HeadV2NameBlobsDigestPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHeadV2NameBlobsDigestTemporaryRedirect creates a HeadV2NameBlobsDigestTemporaryRedirect with default headers values
func NewHeadV2NameBlobsDigestTemporaryRedirect() *HeadV2NameBlobsDigestTemporaryRedirect {
	return &HeadV2NameBlobsDigestTemporaryRedirect{}
}

/*HeadV2NameBlobsDigestTemporaryRedirect handles this case with default header values.

The blob identified by digest is available at the provided location.
*/
type HeadV2NameBlobsDigestTemporaryRedirect struct {
}

func (o *HeadV2NameBlobsDigestTemporaryRedirect) Error() string {
	return fmt.Sprintf("[HEAD /v2/{name}/blobs/{digest}][%d] headV2NameBlobsDigestTemporaryRedirect ", 307)
}

func (o *HeadV2NameBlobsDigestTemporaryRedirect) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHeadV2NameBlobsDigestBadRequest creates a HeadV2NameBlobsDigestBadRequest with default headers values
func NewHeadV2NameBlobsDigestBadRequest() *HeadV2NameBlobsDigestBadRequest {
	return &HeadV2NameBlobsDigestBadRequest{}
}

/*HeadV2NameBlobsDigestBadRequest handles this case with default header values.

On failure
*/
type HeadV2NameBlobsDigestBadRequest struct {
}

func (o *HeadV2NameBlobsDigestBadRequest) Error() string {
	return fmt.Sprintf("[HEAD /v2/{name}/blobs/{digest}][%d] headV2NameBlobsDigestBadRequest ", 400)
}

func (o *HeadV2NameBlobsDigestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHeadV2NameBlobsDigestUnauthorized creates a HeadV2NameBlobsDigestUnauthorized with default headers values
func NewHeadV2NameBlobsDigestUnauthorized() *HeadV2NameBlobsDigestUnauthorized {
	return &HeadV2NameBlobsDigestUnauthorized{}
}

/*HeadV2NameBlobsDigestUnauthorized handles this case with default header values.

Unauthorized access
*/
type HeadV2NameBlobsDigestUnauthorized struct {
}

func (o *HeadV2NameBlobsDigestUnauthorized) Error() string {
	return fmt.Sprintf("[HEAD /v2/{name}/blobs/{digest}][%d] headV2NameBlobsDigestUnauthorized ", 401)
}

func (o *HeadV2NameBlobsDigestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHeadV2NameBlobsDigestNotFound creates a HeadV2NameBlobsDigestNotFound with default headers values
func NewHeadV2NameBlobsDigestNotFound() *HeadV2NameBlobsDigestNotFound {
	return &HeadV2NameBlobsDigestNotFound{}
}

/*HeadV2NameBlobsDigestNotFound handles this case with default header values.

The blob, identified by name and digest, is unknown to the registry.
*/
type HeadV2NameBlobsDigestNotFound struct {
}

func (o *HeadV2NameBlobsDigestNotFound) Error() string {
	return fmt.Sprintf("[HEAD /v2/{name}/blobs/{digest}][%d] headV2NameBlobsDigestNotFound ", 404)
}

func (o *HeadV2NameBlobsDigestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHeadV2NameBlobsDigestRequestRangeNotSatisfiable creates a HeadV2NameBlobsDigestRequestRangeNotSatisfiable with default headers values
func NewHeadV2NameBlobsDigestRequestRangeNotSatisfiable() *HeadV2NameBlobsDigestRequestRangeNotSatisfiable {
	return &HeadV2NameBlobsDigestRequestRangeNotSatisfiable{}
}

/*HeadV2NameBlobsDigestRequestRangeNotSatisfiable handles this case with default header values.

The range specification cannot be satisfied for the requested content.
*/
type HeadV2NameBlobsDigestRequestRangeNotSatisfiable struct {
}

func (o *HeadV2NameBlobsDigestRequestRangeNotSatisfiable) Error() string {
	return fmt.Sprintf("[HEAD /v2/{name}/blobs/{digest}][%d] headV2NameBlobsDigestRequestRangeNotSatisfiable ", 416)
}

func (o *HeadV2NameBlobsDigestRequestRangeNotSatisfiable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
