// Code generated by go-swagger; DO NOT EDIT.

package layer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// PatchV2NameBlobsUploadsUUIDReader is a Reader for the PatchV2NameBlobsUploadsUUID structure.
type PatchV2NameBlobsUploadsUUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchV2NameBlobsUploadsUUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPatchV2NameBlobsUploadsUUIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchV2NameBlobsUploadsUUIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPatchV2NameBlobsUploadsUUIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchV2NameBlobsUploadsUUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 416:
		result := NewPatchV2NameBlobsUploadsUUIDRequestRangeNotSatisfiable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchV2NameBlobsUploadsUUIDNoContent creates a PatchV2NameBlobsUploadsUUIDNoContent with default headers values
func NewPatchV2NameBlobsUploadsUUIDNoContent() *PatchV2NameBlobsUploadsUUIDNoContent {
	return &PatchV2NameBlobsUploadsUUIDNoContent{}
}

/*PatchV2NameBlobsUploadsUUIDNoContent handles this case with default header values.

The stream of data has been accepted and the current progress is available in the range header. The updated upload location is available in the Location header.
*/
type PatchV2NameBlobsUploadsUUIDNoContent struct {
}

func (o *PatchV2NameBlobsUploadsUUIDNoContent) Error() string {
	return fmt.Sprintf("[PATCH /v2/{name}/blobs/uploads/{uuid}][%d] patchV2NameBlobsUploadsUuidNoContent ", 204)
}

func (o *PatchV2NameBlobsUploadsUUIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchV2NameBlobsUploadsUUIDBadRequest creates a PatchV2NameBlobsUploadsUUIDBadRequest with default headers values
func NewPatchV2NameBlobsUploadsUUIDBadRequest() *PatchV2NameBlobsUploadsUUIDBadRequest {
	return &PatchV2NameBlobsUploadsUUIDBadRequest{}
}

/*PatchV2NameBlobsUploadsUUIDBadRequest handles this case with default header values.

On failure
*/
type PatchV2NameBlobsUploadsUUIDBadRequest struct {
	Payload *PatchV2NameBlobsUploadsUUIDBadRequestBody
}

func (o *PatchV2NameBlobsUploadsUUIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v2/{name}/blobs/uploads/{uuid}][%d] patchV2NameBlobsUploadsUuidBadRequest  %+v", 400, o.Payload)
}

func (o *PatchV2NameBlobsUploadsUUIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchV2NameBlobsUploadsUUIDBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV2NameBlobsUploadsUUIDUnauthorized creates a PatchV2NameBlobsUploadsUUIDUnauthorized with default headers values
func NewPatchV2NameBlobsUploadsUUIDUnauthorized() *PatchV2NameBlobsUploadsUUIDUnauthorized {
	return &PatchV2NameBlobsUploadsUUIDUnauthorized{}
}

/*PatchV2NameBlobsUploadsUUIDUnauthorized handles this case with default header values.

Unauthorized access
*/
type PatchV2NameBlobsUploadsUUIDUnauthorized struct {
	Payload *PatchV2NameBlobsUploadsUUIDUnauthorizedBody
}

func (o *PatchV2NameBlobsUploadsUUIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v2/{name}/blobs/uploads/{uuid}][%d] patchV2NameBlobsUploadsUuidUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchV2NameBlobsUploadsUUIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchV2NameBlobsUploadsUUIDUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV2NameBlobsUploadsUUIDNotFound creates a PatchV2NameBlobsUploadsUUIDNotFound with default headers values
func NewPatchV2NameBlobsUploadsUUIDNotFound() *PatchV2NameBlobsUploadsUUIDNotFound {
	return &PatchV2NameBlobsUploadsUUIDNotFound{}
}

/*PatchV2NameBlobsUploadsUUIDNotFound handles this case with default header values.

The upload is unknown to the registry. The upload must be restarted.
*/
type PatchV2NameBlobsUploadsUUIDNotFound struct {
	Payload *PatchV2NameBlobsUploadsUUIDNotFoundBody
}

func (o *PatchV2NameBlobsUploadsUUIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v2/{name}/blobs/uploads/{uuid}][%d] patchV2NameBlobsUploadsUuidNotFound  %+v", 404, o.Payload)
}

func (o *PatchV2NameBlobsUploadsUUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchV2NameBlobsUploadsUUIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV2NameBlobsUploadsUUIDRequestRangeNotSatisfiable creates a PatchV2NameBlobsUploadsUUIDRequestRangeNotSatisfiable with default headers values
func NewPatchV2NameBlobsUploadsUUIDRequestRangeNotSatisfiable() *PatchV2NameBlobsUploadsUUIDRequestRangeNotSatisfiable {
	return &PatchV2NameBlobsUploadsUUIDRequestRangeNotSatisfiable{}
}

/*PatchV2NameBlobsUploadsUUIDRequestRangeNotSatisfiable handles this case with default header values.

The Content-Range specification cannot be accepted, either because it does not overlap with the current progress or it is invalid.
*/
type PatchV2NameBlobsUploadsUUIDRequestRangeNotSatisfiable struct {
}

func (o *PatchV2NameBlobsUploadsUUIDRequestRangeNotSatisfiable) Error() string {
	return fmt.Sprintf("[PATCH /v2/{name}/blobs/uploads/{uuid}][%d] patchV2NameBlobsUploadsUuidRequestRangeNotSatisfiable ", 416)
}

func (o *PatchV2NameBlobsUploadsUUIDRequestRangeNotSatisfiable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PatchV2NameBlobsUploadsUUIDBadRequestBody patch v2 name blobs uploads UUID bad request body
swagger:model PatchV2NameBlobsUploadsUUIDBadRequestBody
*/
type PatchV2NameBlobsUploadsUUIDBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this patch v2 name blobs uploads UUID bad request body
func (o *PatchV2NameBlobsUploadsUUIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchV2NameBlobsUploadsUUIDBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchV2NameBlobsUploadsUuidBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchV2NameBlobsUploadsUUIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchV2NameBlobsUploadsUUIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PatchV2NameBlobsUploadsUUIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchV2NameBlobsUploadsUUIDNotFoundBody patch v2 name blobs uploads UUID not found body
swagger:model PatchV2NameBlobsUploadsUUIDNotFoundBody
*/
type PatchV2NameBlobsUploadsUUIDNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this patch v2 name blobs uploads UUID not found body
func (o *PatchV2NameBlobsUploadsUUIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchV2NameBlobsUploadsUUIDNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchV2NameBlobsUploadsUuidNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchV2NameBlobsUploadsUUIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchV2NameBlobsUploadsUUIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PatchV2NameBlobsUploadsUUIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchV2NameBlobsUploadsUUIDUnauthorizedBody patch v2 name blobs uploads UUID unauthorized body
swagger:model PatchV2NameBlobsUploadsUUIDUnauthorizedBody
*/
type PatchV2NameBlobsUploadsUUIDUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this patch v2 name blobs uploads UUID unauthorized body
func (o *PatchV2NameBlobsUploadsUUIDUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchV2NameBlobsUploadsUUIDUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchV2NameBlobsUploadsUuidUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchV2NameBlobsUploadsUUIDUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchV2NameBlobsUploadsUUIDUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PatchV2NameBlobsUploadsUUIDUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
