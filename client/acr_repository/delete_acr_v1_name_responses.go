// Code generated by go-swagger; DO NOT EDIT.

package acr_repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// DeleteAcrV1NameReader is a Reader for the DeleteAcrV1Name structure.
type DeleteAcrV1NameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAcrV1NameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewDeleteAcrV1NameAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteAcrV1NameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDeleteAcrV1NameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteAcrV1NameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteAcrV1NameAccepted creates a DeleteAcrV1NameAccepted with default headers values
func NewDeleteAcrV1NameAccepted() *DeleteAcrV1NameAccepted {
	return &DeleteAcrV1NameAccepted{}
}

/*DeleteAcrV1NameAccepted handles this case with default header values.

The repoisotry is deleted
*/
type DeleteAcrV1NameAccepted struct {
}

func (o *DeleteAcrV1NameAccepted) Error() string {
	return fmt.Sprintf("[DELETE /acr/v1/{name}][%d] deleteAcrV1NameAccepted ", 202)
}

func (o *DeleteAcrV1NameAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAcrV1NameBadRequest creates a DeleteAcrV1NameBadRequest with default headers values
func NewDeleteAcrV1NameBadRequest() *DeleteAcrV1NameBadRequest {
	return &DeleteAcrV1NameBadRequest{}
}

/*DeleteAcrV1NameBadRequest handles this case with default header values.

On failure
*/
type DeleteAcrV1NameBadRequest struct {
	Payload *DeleteAcrV1NameBadRequestBody
}

func (o *DeleteAcrV1NameBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /acr/v1/{name}][%d] deleteAcrV1NameBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteAcrV1NameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteAcrV1NameBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAcrV1NameUnauthorized creates a DeleteAcrV1NameUnauthorized with default headers values
func NewDeleteAcrV1NameUnauthorized() *DeleteAcrV1NameUnauthorized {
	return &DeleteAcrV1NameUnauthorized{}
}

/*DeleteAcrV1NameUnauthorized handles this case with default header values.

Unauthorized access
*/
type DeleteAcrV1NameUnauthorized struct {
	Payload *DeleteAcrV1NameUnauthorizedBody
}

func (o *DeleteAcrV1NameUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /acr/v1/{name}][%d] deleteAcrV1NameUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteAcrV1NameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteAcrV1NameUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAcrV1NameNotFound creates a DeleteAcrV1NameNotFound with default headers values
func NewDeleteAcrV1NameNotFound() *DeleteAcrV1NameNotFound {
	return &DeleteAcrV1NameNotFound{}
}

/*DeleteAcrV1NameNotFound handles this case with default header values.

The repository is unknown to the registry.
*/
type DeleteAcrV1NameNotFound struct {
	Payload *DeleteAcrV1NameNotFoundBody
}

func (o *DeleteAcrV1NameNotFound) Error() string {
	return fmt.Sprintf("[DELETE /acr/v1/{name}][%d] deleteAcrV1NameNotFound  %+v", 404, o.Payload)
}

func (o *DeleteAcrV1NameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeleteAcrV1NameNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DeleteAcrV1NameBadRequestBody delete acr v1 name bad request body
swagger:model DeleteAcrV1NameBadRequestBody
*/
type DeleteAcrV1NameBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this delete acr v1 name bad request body
func (o *DeleteAcrV1NameBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteAcrV1NameBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteAcrV1NameBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteAcrV1NameBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteAcrV1NameBadRequestBody) UnmarshalBinary(b []byte) error {
	var res DeleteAcrV1NameBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteAcrV1NameNotFoundBody delete acr v1 name not found body
swagger:model DeleteAcrV1NameNotFoundBody
*/
type DeleteAcrV1NameNotFoundBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this delete acr v1 name not found body
func (o *DeleteAcrV1NameNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteAcrV1NameNotFoundBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteAcrV1NameNotFound" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteAcrV1NameNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteAcrV1NameNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteAcrV1NameNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteAcrV1NameUnauthorizedBody delete acr v1 name unauthorized body
swagger:model DeleteAcrV1NameUnauthorizedBody
*/
type DeleteAcrV1NameUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this delete acr v1 name unauthorized body
func (o *DeleteAcrV1NameUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteAcrV1NameUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteAcrV1NameUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteAcrV1NameUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteAcrV1NameUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res DeleteAcrV1NameUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
