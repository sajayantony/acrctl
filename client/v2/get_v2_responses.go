// Code generated by go-swagger; DO NOT EDIT.

package v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// GetV2Reader is a Reader for the GetV2 structure.
type GetV2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetV2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetV2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetV2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetV2OK creates a GetV2OK with default headers values
func NewGetV2OK() *GetV2OK {
	return &GetV2OK{}
}

/*GetV2OK handles this case with default header values.

Successful response. API v2 supported
*/
type GetV2OK struct {
}

func (o *GetV2OK) Error() string {
	return fmt.Sprintf("[GET /v2/][%d] getV2OK ", 200)
}

func (o *GetV2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetV2Unauthorized creates a GetV2Unauthorized with default headers values
func NewGetV2Unauthorized() *GetV2Unauthorized {
	return &GetV2Unauthorized{}
}

/*GetV2Unauthorized handles this case with default header values.

Unauthorized access
*/
type GetV2Unauthorized struct {
	Payload *GetV2UnauthorizedBody
}

func (o *GetV2Unauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/][%d] getV2Unauthorized  %+v", 401, o.Payload)
}

func (o *GetV2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV2UnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV2NotFound creates a GetV2NotFound with default headers values
func NewGetV2NotFound() *GetV2NotFound {
	return &GetV2NotFound{}
}

/*GetV2NotFound handles this case with default header values.

Registry does not implement v2 of the API
*/
type GetV2NotFound struct {
}

func (o *GetV2NotFound) Error() string {
	return fmt.Sprintf("[GET /v2/][%d] getV2NotFound ", 404)
}

func (o *GetV2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetV2UnauthorizedBody get v2 unauthorized body
swagger:model GetV2UnauthorizedBody
*/
type GetV2UnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get v2 unauthorized body
func (o *GetV2UnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV2UnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV2Unauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV2UnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV2UnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetV2UnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
