// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sajayantony/acrctl/models"
)

// GetV2CatalogReader is a Reader for the GetV2Catalog structure.
type GetV2CatalogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV2CatalogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetV2CatalogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetV2CatalogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetV2CatalogUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetV2CatalogOK creates a GetV2CatalogOK with default headers values
func NewGetV2CatalogOK() *GetV2CatalogOK {
	return &GetV2CatalogOK{}
}

/*GetV2CatalogOK handles this case with default header values.

Returns a list of repositories
*/
type GetV2CatalogOK struct {
	Payload *GetV2CatalogOKBody
}

func (o *GetV2CatalogOK) Error() string {
	return fmt.Sprintf("[GET /v2/_catalog][%d] getV2CatalogOK  %+v", 200, o.Payload)
}

func (o *GetV2CatalogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV2CatalogOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV2CatalogBadRequest creates a GetV2CatalogBadRequest with default headers values
func NewGetV2CatalogBadRequest() *GetV2CatalogBadRequest {
	return &GetV2CatalogBadRequest{}
}

/*GetV2CatalogBadRequest handles this case with default header values.

On failure
*/
type GetV2CatalogBadRequest struct {
	Payload *GetV2CatalogBadRequestBody
}

func (o *GetV2CatalogBadRequest) Error() string {
	return fmt.Sprintf("[GET /v2/_catalog][%d] getV2CatalogBadRequest  %+v", 400, o.Payload)
}

func (o *GetV2CatalogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV2CatalogBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV2CatalogUnauthorized creates a GetV2CatalogUnauthorized with default headers values
func NewGetV2CatalogUnauthorized() *GetV2CatalogUnauthorized {
	return &GetV2CatalogUnauthorized{}
}

/*GetV2CatalogUnauthorized handles this case with default header values.

Unauthorized access
*/
type GetV2CatalogUnauthorized struct {
	Payload *GetV2CatalogUnauthorizedBody
}

func (o *GetV2CatalogUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v2/_catalog][%d] getV2CatalogUnauthorized  %+v", 401, o.Payload)
}

func (o *GetV2CatalogUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetV2CatalogUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetV2CatalogBadRequestBody get v2 catalog bad request body
swagger:model GetV2CatalogBadRequestBody
*/
type GetV2CatalogBadRequestBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get v2 catalog bad request body
func (o *GetV2CatalogBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV2CatalogBadRequestBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV2CatalogBadRequest" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV2CatalogBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV2CatalogBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetV2CatalogBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetV2CatalogOKBody get v2 catalog o k body
swagger:model GetV2CatalogOKBody
*/
type GetV2CatalogOKBody struct {

	// data
	Data models.Repositories `json:"data"`
}

// Validate validates this get v2 catalog o k body
func (o *GetV2CatalogOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV2CatalogOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if err := o.Data.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getV2CatalogOK" + "." + "data")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV2CatalogOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV2CatalogOKBody) UnmarshalBinary(b []byte) error {
	var res GetV2CatalogOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetV2CatalogUnauthorizedBody get v2 catalog unauthorized body
swagger:model GetV2CatalogUnauthorizedBody
*/
type GetV2CatalogUnauthorizedBody struct {

	// data
	Data *models.Error `json:"data,omitempty"`
}

// Validate validates this get v2 catalog unauthorized body
func (o *GetV2CatalogUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetV2CatalogUnauthorizedBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getV2CatalogUnauthorized" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetV2CatalogUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetV2CatalogUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetV2CatalogUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
