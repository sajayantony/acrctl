// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetV2CatalogParams creates a new GetV2CatalogParams object
// with the default values initialized.
func NewGetV2CatalogParams() *GetV2CatalogParams {
	var ()
	return &GetV2CatalogParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetV2CatalogParamsWithTimeout creates a new GetV2CatalogParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetV2CatalogParamsWithTimeout(timeout time.Duration) *GetV2CatalogParams {
	var ()
	return &GetV2CatalogParams{

		timeout: timeout,
	}
}

// NewGetV2CatalogParamsWithContext creates a new GetV2CatalogParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetV2CatalogParamsWithContext(ctx context.Context) *GetV2CatalogParams {
	var ()
	return &GetV2CatalogParams{

		Context: ctx,
	}
}

// NewGetV2CatalogParamsWithHTTPClient creates a new GetV2CatalogParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetV2CatalogParamsWithHTTPClient(client *http.Client) *GetV2CatalogParams {
	var ()
	return &GetV2CatalogParams{
		HTTPClient: client,
	}
}

/*GetV2CatalogParams contains all the parameters to send to the API endpoint
for the get v2 catalog operation typically these are written to a http.Request
*/
type GetV2CatalogParams struct {

	/*Last
	  query parameter for the last item in previou query

	*/
	Last *string
	/*N
	  query parameter for max number of items

	*/
	N *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get v2 catalog params
func (o *GetV2CatalogParams) WithTimeout(timeout time.Duration) *GetV2CatalogParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v2 catalog params
func (o *GetV2CatalogParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v2 catalog params
func (o *GetV2CatalogParams) WithContext(ctx context.Context) *GetV2CatalogParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v2 catalog params
func (o *GetV2CatalogParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v2 catalog params
func (o *GetV2CatalogParams) WithHTTPClient(client *http.Client) *GetV2CatalogParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v2 catalog params
func (o *GetV2CatalogParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLast adds the last to the get v2 catalog params
func (o *GetV2CatalogParams) WithLast(last *string) *GetV2CatalogParams {
	o.SetLast(last)
	return o
}

// SetLast adds the last to the get v2 catalog params
func (o *GetV2CatalogParams) SetLast(last *string) {
	o.Last = last
}

// WithN adds the n to the get v2 catalog params
func (o *GetV2CatalogParams) WithN(n *string) *GetV2CatalogParams {
	o.SetN(n)
	return o
}

// SetN adds the n to the get v2 catalog params
func (o *GetV2CatalogParams) SetN(n *string) {
	o.N = n
}

// WriteToRequest writes these params to a swagger request
func (o *GetV2CatalogParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Last != nil {

		// query param last
		var qrLast string
		if o.Last != nil {
			qrLast = *o.Last
		}
		qLast := qrLast
		if qLast != "" {
			if err := r.SetQueryParam("last", qLast); err != nil {
				return err
			}
		}

	}

	if o.N != nil {

		// query param n
		var qrN string
		if o.N != nil {
			qrN = *o.N
		}
		qN := qrN
		if qN != "" {
			if err := r.SetQueryParam("n", qN); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
